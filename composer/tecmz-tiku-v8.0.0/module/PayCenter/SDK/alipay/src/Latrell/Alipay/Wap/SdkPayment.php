<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Latrell\Alipay\Wap; class SdkPayment { private $__gateway_new = 'https://mapi.alipay.com/gateway.do?'; private $__https_verify_url = 'https://mapi.alipay.com/gateway.do?service=notify_verify&'; private $__http_verify_url = 'http://notify.alipay.com/trade/notify_query.do?'; private $service = 'alipay.wap.create.direct.pay.by.user'; private $partner; private $_input_charset = 'UTF-8'; private $sign_type = 'MD5'; private $notify_url; private $return_url; private $out_trade_no; private $payment_type = 1; private $seller_id; private $total_fee; private $subject; private $body; private $it_b_pay; private $show_url; private $exter_invoke_ip; private $app_pay = 'Y'; private $key; private $transport; private $cacert; public function __construct() { $this->cacert = getcwd() . '/../cacert.pem'; } public function getPayLink() { goto UOMUX; rRply: $zTYjj = $this->buildRequestPara($mV4w9); goto T8PUz; UOMUX: $mV4w9 = array('service' => $this->service, 'partner' => $this->partner, 'payment_type' => $this->payment_type, 'notify_url' => $this->notify_url, 'return_url' => $this->return_url, 'seller_id' => $this->seller_id, 'out_trade_no' => $this->out_trade_no, 'subject' => $this->subject, 'total_fee' => $this->total_fee, 'body' => $this->body, 'it_b_pay' => $this->it_b_pay, 'show_url' => $this->show_url, 'exter_invoke_ip' => $this->exter_invoke_ip, 'app_pay' => $this->app_pay, '_input_charset' => strtolower($this->_input_charset)); goto rRply; T8PUz: return $this->__gateway_new . $this->createLinkstringUrlencode($zTYjj); goto ph2Jj; ph2Jj: } public function verify() { goto Egbqb; MlVyP: $BAn8j = $this->getSignVeryfy($GeXSC, $GeXSC['sign']); goto b3Cqj; SVeK9: if (preg_match('/true$/i', $perp2) && $BAn8j) { return true; } else { return false; } goto qo4Q8; b3Cqj: $perp2 = 'true'; goto gqoIK; RBU6z: $GeXSC = $_POST ?: $_GET; goto MlVyP; gqoIK: if (!empty($GeXSC['notify_id'])) { $perp2 = $this->getResponse($GeXSC['notify_id']); } goto SVeK9; Egbqb: if (empty($_POST) && empty($_GET)) { return false; } goto RBU6z; qo4Q8: } public function setPartner($S25ZG) { $this->partner = $S25ZG; return $this; } public function setNotifyUrl($n_tXj) { $this->notify_url = $n_tXj; return $this; } public function setReturnUrl($DdDG6) { $this->return_url = $DdDG6; return $this; } public function setOutTradeNo($gZ4BZ) { $this->out_trade_no = $gZ4BZ; return $this; } public function setKey($Mlv3V) { $this->key = $Mlv3V; return $this; } public function setSellerId($Mr1kc) { $this->seller_id = $Mr1kc; return $this; } public function setTotalFee($lUE_H) { $this->total_fee = $lUE_H; return $this; } public function setSubject($yXTtD) { $this->subject = $yXTtD; return $this; } public function setBody($VhHmv) { $this->body = $VhHmv; return $this; } public function setItBPay($VTVBB) { $this->it_b_pay = $VTVBB; return $this; } public function setShowUrl($foKPc) { $this->show_url = $foKPc; return $this; } public function setSignType($TdBl6) { $this->sign_type = $TdBl6; return $this; } public function setExterInvokeIp($lKTR8) { $this->exter_invoke_ip = $lKTR8; return $this; } public function setAppPay($TXlVe) { $this->app_pay = $TXlVe; return $this; } private function buildRequestPara($Rd7XL) { goto wbaDO; XfMOR: $FXazb = $this->buildRequestMysign($tCLsi); goto MPd5s; lvXhg: $tCLsi['sign_type'] = strtoupper(trim($this->sign_type)); goto jRXfs; VDl22: $tCLsi = $this->argSort($YpHgU); goto XfMOR; jRXfs: return $tCLsi; goto nTxgz; MPd5s: $tCLsi['sign'] = $FXazb; goto lvXhg; wbaDO: $YpHgU = $this->paraFilter($Rd7XL); goto VDl22; nTxgz: } private function paraFilter($zTYjj) { goto zNdki; iocXw: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { if ($Mlv3V == 'sign' || $Mlv3V == 'sign_type' || $o48Br == '') { continue; } else { $YpHgU[$Mlv3V] = $zTYjj[$Mlv3V]; } } goto p3V9r; zNdki: $YpHgU = array(); goto iocXw; p3V9r: return $YpHgU; goto r82Os; r82Os: } private function argSort($zTYjj) { goto KzHvO; KzHvO: ksort($zTYjj); goto vhLBi; vhLBi: reset($zTYjj); goto IQFqs; IQFqs: return $zTYjj; goto lBM5Q; lBM5Q: } private function buildRequestMysign($tCLsi) { goto chMQC; chMQC: $bRMSe = $this->createLinkstring($tCLsi); goto eVrzh; LuhXN: return $FXazb; goto aMLVi; u8QOx: switch (strtoupper(trim($this->sign_type))) { case 'MD5': $FXazb = $this->md5Sign($bRMSe, $this->key); break; default: $FXazb = ''; } goto LuhXN; eVrzh: $FXazb = ''; goto u8QOx; aMLVi: } private function createLinkstring($zTYjj) { goto HgLWd; jgl2P: $uLyCu = substr($uLyCu, 0, count($uLyCu) - 2); goto GOrOV; OtDsn: return $uLyCu; goto DugwQ; GOrOV: if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { $uLyCu = stripslashes($uLyCu); } goto OtDsn; HgLWd: $uLyCu = ''; goto z2b9V; z2b9V: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { $uLyCu .= $Mlv3V . '=' . $o48Br . '&'; } goto jgl2P; DugwQ: } private function createLinkstringUrlencode($zTYjj) { goto FmkAO; o6Fut: $uLyCu = substr($uLyCu, 0, count($uLyCu) - 2); goto qrZKP; TjTi8: return $uLyCu; goto zLP2r; N9m1l: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { $uLyCu .= $Mlv3V . '=' . urlencode($o48Br) . '&'; } goto o6Fut; FmkAO: $uLyCu = ''; goto N9m1l; qrZKP: if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { $uLyCu = stripslashes($uLyCu); } goto TjTi8; zLP2r: } private function md5Sign($bRMSe, $Mlv3V) { $bRMSe = $bRMSe . $Mlv3V; return md5($bRMSe); } private function md5Verify($bRMSe, $GtgYE, $Mlv3V) { goto MMByp; MMByp: $bRMSe = $bRMSe . $Mlv3V; goto JxPmR; rwANk: if ($PVV9N == $GtgYE) { return true; } else { return false; } goto Hze5l; JxPmR: $PVV9N = md5($bRMSe); goto rwANk; Hze5l: } private function getSignVeryfy($Rd7XL, $GtgYE) { goto CPCM9; B2TGo: $bRMSe = $this->createLinkstring($tCLsi); goto Opthy; Opthy: $L2mpU = false; goto D6Esn; D6Esn: switch (strtoupper(trim($this->sign_type))) { case 'MD5': $L2mpU = $this->md5Verify($bRMSe, $GtgYE, $this->key); break; default: $L2mpU = false; } goto KMKbY; LavkF: $tCLsi = $this->argSort($YpHgU); goto B2TGo; CPCM9: $YpHgU = $this->paraFilter($Rd7XL); goto LavkF; KMKbY: return $L2mpU; goto r7qWo; r7qWo: } private function getResponse($oPug3) { goto Z9I4M; fVfoy: $bjkop = ''; goto bCU4x; TvCZu: $perp2 = $this->getHttpResponseGET($bjkop, $this->cacert); goto AKh1c; iXr_c: $bjkop = $bjkop . 'partner=' . $S25ZG . '&notify_id=' . $oPug3; goto TvCZu; gLovK: $S25ZG = trim($this->partner); goto fVfoy; bCU4x: if ($m3RVl == 'https') { $bjkop = $this->__https_verify_url; } else { $bjkop = $this->__http_verify_url; } goto iXr_c; Z9I4M: $m3RVl = strtolower(trim($this->transport)); goto gLovK; AKh1c: return $perp2; goto wje_H; wje_H: } private function getHttpResponseGET($OuCnz, $r4p4f) { goto mWqWz; mRsx6: curl_setopt($I2m2i, CURLOPT_RETURNTRANSFER, 1); goto J7Btt; FFxi3: curl_setopt($I2m2i, CURLOPT_CAINFO, $r4p4f); goto PxCpO; PxCpO: $MTtyC = curl_exec($I2m2i); goto UHNi8; mWqWz: $I2m2i = curl_init($OuCnz); goto Aln4L; UHNi8: curl_close($I2m2i); goto WV49M; Aln4L: curl_setopt($I2m2i, CURLOPT_HEADER, 0); goto mRsx6; J7Btt: curl_setopt($I2m2i, CURLOPT_SSL_VERIFYPEER, true); goto P6IHU; WV49M: return $MTtyC; goto JkGe5; P6IHU: curl_setopt($I2m2i, CURLOPT_SSL_VERIFYHOST, 2); goto FFxi3; JkGe5: } }