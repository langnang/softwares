<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Latrell\Alipay\Mobile; class SdkPayment { private $__https_verify_url = 'https://mapi.alipay.com/gateway.do?service=notify_verify&'; private $__http_verify_url = 'http://notify.alipay.com/trade/notify_query.do?'; private $service = 'mobile.securitypay.pay'; private $partner; private $_input_charset = 'UTF-8'; private $sign_type = 'RSA'; private $private_key_path; private $public_key_path; private $notify_url; private $out_trade_no; private $subject; private $payment_type = 1; private $seller_id; private $total_fee; private $body; private $show_url; private $anti_phishing_key; private $exter_invoke_ip; private $key; private $transport; private $cacert; public function __construct() { $this->cacert = getcwd() . '\\cacert.pem'; } public function getPayPara() { goto E3sDR; A_tPH: $zTYjj = $this->buildRequestPara($mV4w9); goto tZwDM; tZwDM: return $this->createLinkstringUrlencode($zTYjj); goto GW43U; E3sDR: $mV4w9 = array('service' => $this->service, 'partner' => trim($this->partner), 'payment_type' => $this->payment_type, 'notify_url' => $this->notify_url, 'seller_id' => $this->seller_id, 'out_trade_no' => $this->out_trade_no, 'subject' => $this->subject, 'total_fee' => $this->total_fee, 'body' => $this->body, 'show_url' => $this->show_url, 'anti_phishing_key' => $this->anti_phishing_key, 'exter_invoke_ip' => $this->exter_invoke_ip, '_input_charset' => trim(strtolower($this->_input_charset))); goto A_tPH; GW43U: } public function verify() { goto jSG2c; jSG2c: if (empty($_POST) && empty($_GET)) { return false; } goto sI1me; R9bvF: $BAn8j = $this->getSignVeryfy($GeXSC, $GeXSC['sign']); goto ksIol; sI1me: $GeXSC = $_POST ?: $_GET; goto R9bvF; wLnm2: if (!empty($GeXSC['notify_id'])) { $perp2 = $this->getResponse($GeXSC['notify_id']); } goto HLL35; HLL35: if (preg_match('/true$/i', $perp2) && $BAn8j) { return true; } else { return false; } goto fR5Na; ksIol: $perp2 = 'true'; goto wLnm2; fR5Na: } public function setBody($VhHmv) { $this->body = $VhHmv; return $this; } public function setNotifyUrl($n_tXj) { $this->notify_url = $n_tXj; return $this; } public function setOutTradeNo($gZ4BZ) { $this->out_trade_no = $gZ4BZ; return $this; } public function setPartner($S25ZG) { $this->partner = $S25ZG; return $this; } public function setPrivateKeyPath($GYTRg) { $this->private_key_path = $GYTRg; return $this; } public function setPublicKeyPath($ttv5O) { $this->public_key_path = $ttv5O; return $this; } public function setSellerId($Mr1kc) { $this->seller_id = $Mr1kc; return $this; } public function setSubject($yXTtD) { $this->subject = $yXTtD; return $this; } public function setTotalFee($lUE_H) { $this->total_fee = $lUE_H; return $this; } public function setSignType($TdBl6) { $this->sign_type = $TdBl6; return $this; } private function buildRequestPara($Rd7XL) { goto NuM8R; Xb1pu: $FXazb = $this->buildRequestMysign($tCLsi); goto qJVvP; NuM8R: $YpHgU = $this->paraFilter($Rd7XL); goto EyFXD; OdhzP: return $tCLsi; goto NkxFf; qJVvP: $tCLsi['sign'] = $FXazb; goto hdWBV; hdWBV: $tCLsi['sign_type'] = strtoupper(trim($this->sign_type)); goto OdhzP; EyFXD: $tCLsi = $this->argSort($YpHgU); goto Xb1pu; NkxFf: } private function buildRequestMysign($tCLsi) { goto n_h8p; n_h8p: $bRMSe = $this->createLinkstring($tCLsi); goto UeNBt; UeNBt: $FXazb = ''; goto PVs4G; bENiC: return $FXazb; goto gg29C; PVs4G: switch (strtoupper(trim($this->sign_type))) { case 'MD5': $FXazb = $this->md5Sign($bRMSe, $this->key); break; case 'RSA': $FXazb = $this->rsaSign($bRMSe, trim($this->private_key_path)); break; default: $FXazb = ''; } goto bENiC; gg29C: } function getSignVeryfy($Rd7XL, $GtgYE) { goto B3vXc; PjW2_: $bRMSe = $this->createLinkstring($tCLsi); goto TTvS7; N_LYh: return $L2mpU; goto zOJVp; GAS0c: $tCLsi = $this->argSort($YpHgU); goto PjW2_; TTvS7: $L2mpU = false; goto viay_; B3vXc: $YpHgU = $this->paraFilter($Rd7XL); goto GAS0c; viay_: switch (strtoupper(trim($this->sign_type))) { case 'MD5': $L2mpU = $this->md5Verify($bRMSe, $GtgYE, $this->key); break; case 'RSA': $L2mpU = $this->rsaVerify($bRMSe, $this->public_key_path, $GtgYE); break; default: $L2mpU = false; } goto N_LYh; zOJVp: } private function paraFilter($zTYjj) { goto kA7gi; Hd2aJ: return $YpHgU; goto qIbtA; kA7gi: $YpHgU = array(); goto tL9eV; tL9eV: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { if ($Mlv3V == 'sign' || $Mlv3V == 'sign_type' || $o48Br == '') { continue; } else { $YpHgU[$Mlv3V] = $zTYjj[$Mlv3V]; } } goto Hd2aJ; qIbtA: } private function argSort($zTYjj) { goto PvEBV; S8Mt0: return $zTYjj; goto IUYhV; PvEBV: ksort($zTYjj); goto C8bG8; C8bG8: reset($zTYjj); goto S8Mt0; IUYhV: } private function rsaVerify($GeXSC, $ttv5O, $GtgYE) { goto sjiAW; ue03A: $z4jAX = openssl_get_publickey($keZZc); goto CbzCt; ko6zW: openssl_free_key($z4jAX); goto Z1Aj2; Z1Aj2: return $hlYz_; goto Wtne1; sjiAW: $keZZc = file_get_contents($ttv5O); goto ue03A; CbzCt: $hlYz_ = (bool) openssl_verify($GeXSC, base64_decode($GtgYE), $z4jAX); goto ko6zW; Wtne1: } private function rsaSign($GeXSC, $GYTRg) { goto DHf18; DHf18: $NREwS = file_get_contents($GYTRg); goto rNhFU; n6ixO: return $GtgYE; goto x0JjV; luxOb: openssl_free_key($z4jAX); goto iFlk2; rNhFU: $z4jAX = openssl_get_privatekey($NREwS); goto HtZ9d; HtZ9d: openssl_sign($GeXSC, $GtgYE, $z4jAX); goto luxOb; iFlk2: $GtgYE = base64_encode($GtgYE); goto n6ixO; x0JjV: } private function createLinkstring($zTYjj) { goto FJzM7; FJzM7: $uLyCu = ''; goto uUNAn; uUNAn: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { $uLyCu .= $Mlv3V . '=' . $o48Br . '&'; } goto NgYO3; NgYO3: $uLyCu = substr($uLyCu, 0, count($uLyCu) - 2); goto gq46K; gq46K: if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { $uLyCu = stripslashes($uLyCu); } goto nGES3; nGES3: return $uLyCu; goto xVI23; xVI23: } private function createLinkstringUrlencode($zTYjj) { goto cnndD; AMF3t: $uLyCu = substr($uLyCu, 0, count($uLyCu) - 2); goto VE40E; KWzNl: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { $uLyCu .= $Mlv3V . '=' . urlencode($o48Br) . '&'; } goto AMF3t; VE40E: if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { $uLyCu = stripslashes($uLyCu); } goto NL33v; cnndD: $uLyCu = ''; goto KWzNl; NL33v: return $uLyCu; goto lBg5K; lBg5K: } private function getResponse($oPug3) { goto zXFjl; e_1nj: return $perp2; goto rhZZB; A8mRX: $S25ZG = trim($this->partner); goto bEci6; Na1kF: $bjkop = $bjkop . 'partner=' . $S25ZG . '&notify_id=' . $oPug3; goto dYMFY; xpfQQ: if ($m3RVl == 'https') { $bjkop = $this->__https_verify_url; } else { $bjkop = $this->__http_verify_url; } goto Na1kF; dYMFY: $perp2 = $this->getHttpResponseGET($bjkop, $this->cacert); goto e_1nj; zXFjl: $m3RVl = strtolower(trim($this->transport)); goto A8mRX; bEci6: $bjkop = ''; goto xpfQQ; rhZZB: } private function getHttpResponseGET($OuCnz, $r4p4f) { goto NgqPh; u21yQ: curl_setopt($I2m2i, CURLOPT_CAINFO, $r4p4f); goto r54HB; BwFjL: curl_setopt($I2m2i, CURLOPT_SSL_VERIFYPEER, true); goto MQNuP; r54HB: $MTtyC = curl_exec($I2m2i); goto djlMH; plWMq: curl_setopt($I2m2i, CURLOPT_RETURNTRANSFER, 1); goto BwFjL; MQNuP: curl_setopt($I2m2i, CURLOPT_SSL_VERIFYHOST, 2); goto u21yQ; m3W4U: return $MTtyC; goto Yhfs2; djlMH: curl_close($I2m2i); goto m3W4U; NgqPh: $I2m2i = curl_init($OuCnz); goto rsSPy; rsSPy: curl_setopt($I2m2i, CURLOPT_HEADER, 0); goto plWMq; Yhfs2: } }