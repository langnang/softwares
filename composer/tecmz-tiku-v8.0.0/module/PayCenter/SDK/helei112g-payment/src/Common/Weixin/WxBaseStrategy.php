<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Payment\Common\Weixin; use GuzzleHttp\Client; use Payment\Common\BaseData; use Payment\Common\BaseStrategy; use Payment\Common\PayException; use Payment\Common\WxConfig; use Payment\Utils\ArrayUtil; use Payment\Utils\DataParser; abstract class WxBaseStrategy implements BaseStrategy { protected $reqUrl = 'https://api.mch.weixin.qq.com/{debug}/pay/unifiedorder'; protected $config; protected $reqData; public function __construct(array $qc0K6) { try { $this->config = new WxConfig($qc0K6); } catch (PayException $knlzD) { throw $knlzD; } } protected function sendReq($Fc2BM) { goto B9qV8; t36RW: if (is_null($OuCnz)) { throw new PayException('目前不支持该接口。请联系开发者添加'); } goto d4d2K; ec_QF: $eypYa = DataParser::toArray($VhHmv); goto j1LgR; d4d2K: if ($this->config->useSandbox) { $OuCnz = str_ireplace('{debug}', WxConfig::SANDBOX_PRE, $OuCnz); } else { $OuCnz = str_ireplace('{debug}/', '', $OuCnz); } goto D0_J3; dfgfc: if (strtoupper($eypYa['result_code']) != 'SUCCESS') { $klZBn = $eypYa['err_code_des'] ? $eypYa['err_code_des'] : $eypYa['err_msg']; throw new PayException('微信返回错误提示：' . $klZBn); } goto EF98B; RRB_0: $m7iz2 = array('body' => $Fc2BM, 'cert' => $this->config->appCertPem, 'ssl_key' => $this->config->appKeyPem, 'verify' => $this->config->cacertPath, 'http_errors' => false); goto XfOts; B9qV8: $OuCnz = $this->reqUrl; goto t36RW; j1LgR: if (strtoupper($eypYa['return_code']) != 'SUCCESS') { throw new PayException('微信返回错误提示：' . $eypYa['return_msg']); } goto dfgfc; oH8uY: if ($tYsZE->getStatusCode() != '200') { throw new PayException('网络发生错误，请稍后再试curl返回码：' . $tYsZE->getReasonPhrase()); } goto W2zZX; W2zZX: $VhHmv = $tYsZE->getBody()->getContents(); goto ec_QF; XfOts: $tYsZE = $QkJ1i->request('POST', $OuCnz, $m7iz2); goto oH8uY; EF98B: return $eypYa; goto yKW7Y; D0_J3: $QkJ1i = new Client(array('timeout' => '10.0')); goto RRB_0; yKW7Y: } public function handle(array $GeXSC) { goto gyXjY; N2OFv: if (!$gSChU) { throw new PayException('微信返回数据被篡改。请检查网络是否安全！'); } goto uwG65; Se2zR: $gSChU = $this->verifySign($BEdDh); goto N2OFv; mjNjX: try { $this->reqData = new $FjIu5($this->config, $GeXSC); } catch (PayException $knlzD) { throw $knlzD; } goto Z4on1; uwG65: return $this->retData($BEdDh); goto WRvqC; cvbxw: try { $BEdDh = $this->sendReq($Fc2BM); } catch (PayException $knlzD) { throw $knlzD; } goto Se2zR; gyXjY: $FjIu5 = $this->getBuildDataClass(); goto mjNjX; uG5FU: $Fc2BM = DataParser::toXml($this->reqData->getData()); goto cvbxw; Z4on1: $this->reqData->setSign(); goto uG5FU; WRvqC: } protected function retData(array $BEdDh) { return $BEdDh; } protected function verifySign(array $eypYa) { goto t1jUN; OGsuB: switch ($this->config->signType) { case 'MD5': $GtgYE = md5($IRvxP); break; case 'HMAC-SHA256': $GtgYE = hash_hmac('sha256', $IRvxP, $this->config->md5Key); break; default: $GtgYE = ''; } goto ZXwMW; ZXwMW: return strtoupper($GtgYE) === $UDWGC; goto oz7gF; t1jUN: $UDWGC = $eypYa['sign']; goto FJ_Sv; c1qvC: $IRvxP = ArrayUtil::createLinkstring($vjyaQ); goto txGhJ; txGhJ: $IRvxP .= '&key=' . $this->config->md5Key; goto OGsuB; fY_vZ: $vjyaQ = ArrayUtil::paraFilter($vjyaQ); goto bzqm4; bzqm4: $vjyaQ = ArrayUtil::arraySort($vjyaQ); goto c1qvC; FJ_Sv: $vjyaQ = ArrayUtil::removeKeys($eypYa, array('sign', 'sign_type')); goto fY_vZ; oz7gF: } }