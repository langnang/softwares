<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\PayCenter\Util; use Carbon\Carbon; use EasyWeChat\Factory; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Session; use Illuminate\Support\Str; use ModStart\Core\Dao\ModelUtil; use ModStart\Core\Exception\BizException; use ModStart\Core\Input\Response; use ModStart\Core\Util\EncodeUtil; use ModStart\Core\Util\EventUtil; use ModStart\Core\Util\IdUtil; use ModStart\Core\Util\RandomUtil; use Module\Member\Util\MemberMoneyUtil; use Module\PayCenter\Events\OrderPayedEvent; use Module\PayCenter\Provider\PayCenterProvider; use Module\PayCenter\Type\PayOrderStatus; use Module\PayCenter\Type\PayType; use Module\Vendor\Log\Logger; use Payment\Client\Charge; use Payment\Config; class PayOrderUtil { private static function getOrGeneratePaySessionKey() { goto IiLEj; CUI3f: return $Mlv3V; goto A1YNT; IiLEj: $Mlv3V = Session::get('paySessionKey', null); goto aziVf; aziVf: if (empty($Mlv3V)) { $Mlv3V = RandomUtil::string(32); Session::put('paySessionKey', $Mlv3V); } goto CUI3f; A1YNT: } public static function updateFee($PeuNd, $G_Ybp, $DO0wP) { goto rtYGK; F0A6M: BizException::throwsIfEmpty('订单不存在', $IfVKl); goto A50ky; A50ky: if ($IfVKl['status'] == PayOrderStatus::NEW_ORDER || $IfVKl['status'] == PayOrderStatus::CREATED) { self::update($IfVKl['id'], array('feeTotal' => $DO0wP)); } goto fzK7V; rtYGK: $IfVKl = self::getByBizAndBizId($PeuNd, $G_Ybp); goto F0A6M; fzK7V: } public static function autoPay($PeuNd, $G_Ybp, $DO0wP = null) { goto WIbSl; WIbSl: $XdWpe = PayOrderUtil::prepareOrder($PeuNd, $G_Ybp, $DO0wP); goto vtwyo; vtwyo: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => PayType::NONE, 'timePayCreated' => Carbon::now(), 'payOrderId' => null)); goto KXc74; KXc74: return PayOrderUtil::handleOrderPay(PayType::NONE, config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id']); goto KnkUe; KnkUe: } public static function prepareOrder($PeuNd, $G_Ybp, $DO0wP = null, $VhHmv = null, $UYUrz = null, $oG0tD = array()) { goto Cce23; tIQBD: return $IfVKl; goto t0LfR; Cce23: $M6ZFe = ModelUtil::get('pay_order', array('biz' => $PeuNd, 'bizId' => $G_Ybp)); goto l1CXi; l1CXi: $IfVKl = array(); goto ftdB6; ftdB6: if (empty($M6ZFe)) { goto rpyZf; rpyZf: $wa91I = IdUtil::generateSN(); goto S0X_R; nbb8F: $IfVKl['timePayCreated'] = null; goto yIt1p; Y_YtY: $IfVKl['timeRefundSuccess'] = null; goto uRoWQ; b7YVe: $IfVKl = ModelUtil::insert('pay_order', $IfVKl); goto siyJs; jMJLB: $IfVKl['body'] = $VhHmv; goto SPQRv; yIt1p: $IfVKl['timePay'] = null; goto Eoafn; fo22U: $IfVKl['payType'] = null; goto erLCT; S0X_R: $IfVKl['id'] = $wa91I; goto BAd6J; erLCT: $IfVKl['status'] = PayOrderStatus::NEW_ORDER; goto qh5Jz; siyJs: $IfVKl['id'] = $wa91I; goto s20ys; uRoWQ: $IfVKl['timeClosed'] = null; goto uYg0n; seLxw: $IfVKl['bizId'] = $G_Ybp; goto fo22U; ncV_x: $IfVKl['timeRefundCreated'] = null; goto Y_YtY; uYg0n: $IfVKl['param'] = json_encode($oG0tD, JSON_UNESCAPED_UNICODE); goto jMJLB; BAd6J: $IfVKl['biz'] = $PeuNd; goto seLxw; SPQRv: $IfVKl['redirect'] = $UYUrz; goto b7YVe; Eoafn: $IfVKl['feeRefund'] = null; goto ncV_x; dgsuc: $IfVKl['feeTotal'] = $DO0wP; goto nbb8F; qh5Jz: $IfVKl['payOrderId'] = null; goto dgsuc; s20ys: $IfVKl['param'] = $oG0tD; goto hTeCd; hTeCd: } else { goto K5REi; SLqfV: if (null !== $VhHmv) { $tcTgP['body'] = $VhHmv; } goto hiShp; yZTkG: if (!empty($oG0tD)) { $tcTgP['param'] = json_encode($oG0tD, JSON_UNESCAPED_UNICODE); } goto oqz1B; K5REi: $IfVKl = $M6ZFe; goto P078W; gK1Sm: switch ($IfVKl['status']) { case PayOrderStatus::NEW_ORDER: break; case PayOrderStatus::CREATED: goto wv2C8; wv2C8: $tcTgP['status'] = PayOrderStatus::NEW_ORDER; goto Mn1Ql; EbgV9: break; goto I1Y2D; Mn1Ql: $tcTgP['timeClosed'] = null; goto EbgV9; I1Y2D: case PayOrderStatus::CLOSED: goto mD62n; mD62n: $tcTgP['status'] = PayOrderStatus::NEW_ORDER; goto pz9IZ; IbsA9: break; goto UUc8V; pz9IZ: $tcTgP['timeClosed'] = null; goto IbsA9; UUc8V: case PayOrderStatus::CLOSED_EXPIRED: goto GwlxU; vD5Kn: break; goto G0IQg; qyuYr: $tcTgP['timeClosed'] = null; goto vD5Kn; GwlxU: $tcTgP['status'] = PayOrderStatus::NEW_ORDER; goto qyuYr; G0IQg: default: BizException::throws('订单状态异常'); } goto yZTkG; P078W: $tcTgP = array(); goto ms6Bp; hiShp: if (null !== $UYUrz) { $tcTgP['redirect'] = $UYUrz; } goto gK1Sm; ms6Bp: if (null !== $DO0wP) { $tcTgP['feeTotal'] = $DO0wP; } goto SLqfV; oqz1B: if (!empty($tcTgP)) { ModelUtil::update('pay_order', $M6ZFe['id'], $tcTgP); foreach ($tcTgP as $nJFbs => $NIxlc) { $IfVKl[$nJFbs] = $NIxlc; } } goto TiJO_; TiJO_: } goto tIQBD; t0LfR: } public static function getOrderSecretId($IPYm0) { return EncodeUtil::expiredDataForever($IPYm0, self::getOrGeneratePaySessionKey()); } public static function getOrder($IfVKl) { goto M9GnZ; Pxn2e: ModelUtil::decodeRecordJson($NZ_6d, array('param')); goto dwhxc; vAjxO: $NZ_6d = ModelUtil::get('pay_order', $wa91I); goto Pxn2e; V8CYq: if (!$wa91I) { return null; } goto vAjxO; Qyf2L: return $NZ_6d; goto EuKYu; M9GnZ: $wa91I = EncodeUtil::expiredDataDecode($IfVKl, self::getOrGeneratePaySessionKey()); goto V8CYq; dwhxc: $NZ_6d['id'] = '' . $NZ_6d['id']; goto Qyf2L; EuKYu: } public static function createPay($IPYm0, $l9M__, $InfBU = array()) { goto ZCMF2; TC2T2: if ($XdWpe['status'] == PayOrderStatus::PAYED) { return Response::generateError('订单已支付'); } else { if ($XdWpe['status'] == PayOrderStatus::CLOSED) { return Response::generateError('订单已关闭，请刷新该页面'); } } goto t7kve; t7kve: switch ($l9M__) { case PayType::ALIPAY: return self::createAlipay($XdWpe, $l9M__, $InfBU); case PayType::ALIPAY_WEB: return self::createAlipayWeb($XdWpe, $l9M__, $InfBU); case PayType::ALIPAY_MOBILE: return self::createAlipayMobile($XdWpe, $l9M__, $InfBU); case PayType::WECHAT: return self::createWechat($XdWpe, $l9M__, $InfBU); case PayType::WECHAT_MOBILE: return self::createWechatMobile($XdWpe, $l9M__, $InfBU); case PayType::WECHAT_APP: return self::createWechatApp($XdWpe, $l9M__, $InfBU); case PayType::WECHAT_MINI_PROGRAM: return self::createWechatMiniProgram($XdWpe, $l9M__, $InfBU); case PayType::WECHAT_H5: return self::createWechatH5($XdWpe, $l9M__, $InfBU); case PayType::MEMBER_MONEY: return self::createMemberMoney($XdWpe, $l9M__, $InfBU); default: goto EvD0D; gS7sr: return Response::generate(-1, '支付方式不存在'); goto h7wTq; jHgQp: if ($qhOVL) { return $qhOVL->onSubmit($XdWpe, $l9M__, $InfBU); } goto gS7sr; EvD0D: $qhOVL = PayCenterProvider::get($l9M__); goto jHgQp; h7wTq: } goto vcZXs; OYTej: BizException::throwsIfEmpty('订单不存在', $XdWpe); goto TC2T2; ZCMF2: $XdWpe = self::get($IPYm0); goto OYTej; vcZXs: } public static function update($wa91I, $GeXSC) { return ModelUtil::update('pay_order', array('id' => $wa91I), $GeXSC); } public static function total() { $rkNs3 = ModelUtil::model('pay_order')->where('status', PayOrderStatus::PAYED)->sum('feeTotal'); return sprintf('%.2f', $rkNs3); } public static function totalByTimeRange($nHwQA, $F3zdC) { $rkNs3 = ModelUtil::model('pay_order')->where('status', PayOrderStatus::PAYED)->where('created_at', '>=', $nHwQA)->where('created_at', '<=', $F3zdC)->sum('feeTotal'); return sprintf('%.2f', $rkNs3); } public static function get($wa91I) { goto Jx1bv; erqO4: return $nq5ti; goto Dl1NN; Jx1bv: $nq5ti = ModelUtil::get('pay_order', $wa91I); goto HTtO1; HTtO1: ModelUtil::decodeRecordJson($nq5ti, 'param'); goto erqO4; Dl1NN: } public static function getByBizAndBizId($PeuNd, $G_Ybp) { goto pY9MK; pY9MK: $nq5ti = ModelUtil::get('pay_order', array('biz' => $PeuNd, 'bizId' => $G_Ybp)); goto Tl6He; Tl6He: ModelUtil::decodeRecordJson($nq5ti, 'param'); goto ajm39; ajm39: return $nq5ti; goto Ft5BV; Ft5BV: } public static function getWechatPayment() { goto VCIaE; VCIaE: $qc0K6 = modstart_config(); goto sd1fE; htJu5: return Factory::payment($qc0K6); goto sNuRG; sd1fE: $qc0K6 = array('app_id' => $qc0K6->getWithEnv('payWechatAppId'), 'mch_id' => $qc0K6->getWithEnv('payWechatMerchantId'), 'key' => $qc0K6->getWithEnv('payWechatKey'), 'cert_path' => '', 'key_path' => '', 'log' => array('default' => 'debug', 'channels' => array('debug' => array('driver' => 'single', 'path' => Logger::rotateLog('PayCenter_Wechat'), 'level' => 'debug')))); goto htJu5; sNuRG: } private static function createWechat($XdWpe, $l9M__, $InfBU) { goto leiVI; xhEA4: return Response::generate(0, null, $GeXSC); goto ubLEF; kZyPj: if (!isset($BEdDh['return_code']) || $BEdDh['return_code'] != 'SUCCESS') { return Response::generate(-1, '创建订单失败:1:(' . (isset($BEdDh['return_msg']) ? $BEdDh['return_msg'] : 'NULL') . ')'); } goto u_LJG; dEr_w: $GeXSC = array('payCodeUrl' => $BEdDh['code_url'], 'successRedirect' => $XdWpe['redirect']); goto xhEA4; leiVI: if (!modstart_config('payWechatOn', false)) { return Response::generate(-1, '微信支付未开启'); } goto YiNkc; b8Ysu: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now(), 'payOrderId' => $BEdDh['prepay_id'])); goto dEr_w; YdE72: $xAsVN = array('trade_type' => 'NATIVE', 'body' => $XdWpe['body'], 'out_trade_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'] . '_' . RandomUtil::string(3), 'total_fee' => intval(bcmul($XdWpe['feeTotal'], 100, 2)), 'notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::WECHAT))); goto IaSuJ; IaSuJ: if (isset($InfBU['limitPay'])) { switch ($InfBU['limitPay']) { case 'no_credit': $xAsVN['limit_pay'] = $InfBU['limitPay']; break; default: BizException::throws('Unknown limitPay'); break; } } goto uuDpZ; u_LJG: if (!isset($BEdDh['result_code'])) { return Response::generate(-1, '订单创建失败:2'); } goto EFYnw; YiNkc: $h_fvE = self::getWechatPayment(); goto YdE72; EFYnw: if ($BEdDh['result_code'] != 'SUCCESS') { $EVfCz = $BEdDh['err_code_des']; return Response::generate(-1, '创建订单失败:3:(' . $EVfCz . ')'); } goto b8Ysu; uuDpZ: $BEdDh = $h_fvE->order->unify($xAsVN); goto kZyPj; ubLEF: } private static function createWechatApp($XdWpe, $l9M__, $InfBU) { goto yXdkt; t4vFQ: $xAsVN = array('trade_type' => 'APP', 'body' => $XdWpe['body'], 'out_trade_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'] . '_' . RandomUtil::string(3), 'total_fee' => intval(bcmul($XdWpe['feeTotal'], 100, 2)), 'notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::WECHAT_MOBILE))); goto etIrW; yXdkt: $h_fvE = self::getWechatPayment(); goto t4vFQ; UYIU8: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now(), 'payOrderId' => $BEdDh['prepay_id'])); goto SaveP; MlmNE: if (!isset($BEdDh['result_code'])) { return Response::generate(-1, '订单创建失败:2'); } goto cM0Gu; SaveP: $MEhIq = $h_fvE->jssdk->bridgeConfig($BEdDh['prepay_id'], false); goto s71Wk; i2LQE: return Response::generate(0, null, $GeXSC); goto ql4Hm; cM0Gu: if ($BEdDh['result_code'] != 'SUCCESS') { $EVfCz = $BEdDh['err_code_des']; return Response::generate(-1, '创建订单失败:3:(' . $EVfCz . ')'); } goto UYIU8; dZGjg: if (!isset($BEdDh['return_code']) || $BEdDh['return_code'] != 'SUCCESS') { return Response::generate(-1, '创建订单失败:1:(' . (isset($BEdDh['return_msg']) ? $BEdDh['return_msg'] : 'NULL') . ')'); } goto MlmNE; CpbCN: $BEdDh = $h_fvE->order->unify($xAsVN); goto dZGjg; s71Wk: $GeXSC = array('payJsSdkConfig' => $MEhIq, 'successRedirect' => $XdWpe['redirect']); goto i2LQE; etIrW: if (isset($InfBU['limitPay'])) { switch ($InfBU['limitPay']) { case 'no_credit': $xAsVN['limit_pay'] = $InfBU['limitPay']; break; default: BizException::throws('Unknown limitPay'); break; } } goto CpbCN; ql4Hm: } private static function createWechatMobile($XdWpe, $l9M__, $InfBU) { goto aP6JM; l4aA5: if (!isset($BEdDh['return_code']) || $BEdDh['return_code'] != 'SUCCESS') { return Response::generate(-1, '创建订单失败:1:(' . (isset($BEdDh['return_msg']) ? $BEdDh['return_msg'] : 'NULL') . ')'); } goto uyX1e; JM2iI: if (isset($InfBU['limitPay'])) { switch ($InfBU['limitPay']) { case 'no_credit': $xAsVN['limit_pay'] = $InfBU['limitPay']; break; default: BizException::throws('Unknown limitPay'); break; } } goto OHUEJ; OD6Ri: if (empty($InfBU['openId'])) { return Response::generate(-1, 'wechat mobile openId empty'); } goto v_5zR; c2izD: return Response::generate(0, null, $GeXSC); goto UMA39; jZ4hU: $xAsVN = array('openid' => $InfBU['openId'], 'trade_type' => 'JSAPI', 'body' => $XdWpe['body'], 'out_trade_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'] . '_' . RandomUtil::string(3), 'total_fee' => intval(bcmul($XdWpe['feeTotal'], 100, 2)), 'notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::WECHAT_MOBILE))); goto JM2iI; g3tri: $GeXSC = array('payJsSdkConfig' => $MEhIq, 'successRedirect' => $XdWpe['redirect']); goto c2izD; uyX1e: if (!isset($BEdDh['result_code'])) { return Response::generate(-1, '订单创建失败:2'); } goto l9103; idlfc: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now(), 'payOrderId' => $BEdDh['prepay_id'])); goto y8kZ8; OHUEJ: $BEdDh = $h_fvE->order->unify($xAsVN); goto l4aA5; aP6JM: if (!modstart_config('payWechatOn', false)) { return Response::generate(-1, 'wechat mobile pay not enable'); } goto OD6Ri; l9103: if ($BEdDh['result_code'] != 'SUCCESS') { $EVfCz = $BEdDh['err_code_des']; return Response::generate(-1, '创建订单失败:3:(' . $EVfCz . ')'); } goto idlfc; v_5zR: $h_fvE = self::getWechatPayment(); goto jZ4hU; y8kZ8: $MEhIq = $h_fvE->jssdk->bridgeConfig($BEdDh['prepay_id'], false); goto g3tri; UMA39: } private static function createWechatH5($XdWpe, $l9M__, $InfBU) { goto A2jVB; TSTIz: $h_fvE = self::getWechatPayment(); goto EA0Fa; vE4Ld: if ($BEdDh['result_code'] != 'SUCCESS') { $EVfCz = $BEdDh['err_code_des']; return Response::generate(-1, '创建订单失败:3:(' . $EVfCz . ')'); } goto pywFm; ClKW7: return Response::generate(0, null, $GeXSC); goto R3EVS; JNCsS: $GeXSC = array('payLink' => $BEdDh['mweb_url'], 'successRedirect' => $XdWpe['redirect']); goto ClKW7; pywFm: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now(), 'payOrderId' => $BEdDh['prepay_id'])); goto JNCsS; A2jVB: if (!modstart_config('payWechatOn', false)) { return Response::generate(-1, 'wechat mobile pay not enable'); } goto TSTIz; STPUr: if (!isset($BEdDh['result_code'])) { return Response::generate(-1, '订单创建失败:2'); } goto vE4Ld; bw97E: $BEdDh = $h_fvE->order->unify($xAsVN); goto hvudN; hvudN: if (!isset($BEdDh['return_code']) || $BEdDh['return_code'] != 'SUCCESS') { return Response::generate(-1, '创建订单失败:1:(' . (isset($BEdDh['return_msg']) ? $BEdDh['return_msg'] : 'NULL') . ')'); } goto STPUr; EA0Fa: $xAsVN = array('trade_type' => 'MWEB', 'body' => $XdWpe['body'], 'out_trade_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'] . '_' . RandomUtil::string(3), 'total_fee' => intval(bcmul($XdWpe['feeTotal'], 100, 2)), 'notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::WECHAT_H5))); goto TU4Qz; TU4Qz: if (isset($InfBU['limitPay'])) { switch ($InfBU['limitPay']) { case 'no_credit': $xAsVN['limit_pay'] = $InfBU['limitPay']; break; default: BizException::throws('Unknown limitPay'); break; } } goto bw97E; R3EVS: } public static function getWechatMiniProgramPayment() { goto OtNju; qY1ub: return Factory::payment($qc0K6); goto KJqeK; OtNju: $qc0K6 = modstart_config(); goto e0QVj; e0QVj: $qc0K6 = array('app_id' => $qc0K6->getWithEnv('oauthWechatMiniProgramAppId'), 'mch_id' => $qc0K6->getWithEnv('payWechatMerchantId'), 'key' => $qc0K6->getWithEnv('payWechatKey'), 'cert_path' => '', 'key_path' => '', 'log' => array('default' => 'info', 'channels' => array('info' => array('driver' => 'single', 'path' => Logger::rotateLog('PayCenter_Wechat'), 'level' => 'info')))); goto qY1ub; KJqeK: } private static function createWechatMiniProgram($XdWpe, $l9M__, $InfBU) { goto aX7x0; EpzKM: $MEhIq = $h_fvE->jssdk->bridgeConfig($BEdDh['prepay_id'], false); goto c2rYP; XS70s: if (!isset($BEdDh['return_code']) || $BEdDh['return_code'] != 'SUCCESS') { return Response::generate(-1, '创建订单失败:1:(' . (isset($BEdDh['return_msg']) ? $BEdDh['return_msg'] : 'NULL') . ')'); } goto EyOfJ; aX7x0: if (!modstart_config('payWechatOn', false)) { return Response::generate(-1, 'wechat mini program pay not enable'); } goto NOGXD; feiBI: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now(), 'payOrderId' => $BEdDh['prepay_id'])); goto EpzKM; CUzoH: return Response::generate(0, null, $GeXSC); goto T5ZGM; EyOfJ: if (!isset($BEdDh['result_code'])) { return Response::generate(-1, '订单创建失败:2'); } goto xT_g4; NOGXD: if (empty($InfBU['openId'])) { return Response::generate(-1, 'wechat mini program openId empty'); } goto t79Xf; xT_g4: if ($BEdDh['result_code'] != 'SUCCESS') { $EVfCz = $BEdDh['err_code_des']; return Response::generate(-1, '创建订单失败:3:(' . $EVfCz . ')'); } goto feiBI; TuiKp: if (isset($InfBU['limitPay'])) { switch ($InfBU['limitPay']) { case 'no_credit': $xAsVN['limit_pay'] = $InfBU['limitPay']; break; default: BizException::throws('Unknown limitPay'); break; } } goto WRLnn; WRLnn: $BEdDh = $h_fvE->order->unify($xAsVN); goto XS70s; c2rYP: $GeXSC = array('payJsSdkConfig' => $MEhIq, 'successRedirect' => $XdWpe['redirect']); goto CUzoH; BknWz: $xAsVN = array('openid' => $InfBU['openId'], 'trade_type' => 'JSAPI', 'body' => $XdWpe['body'], 'out_trade_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'] . '_' . RandomUtil::string(3), 'total_fee' => intval(bcmul($XdWpe['feeTotal'], 100, 2)), 'notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::WECHAT_MINI_PROGRAM))); goto TuiKp; t79Xf: $h_fvE = self::getWechatMiniProgramPayment(); goto BknWz; T5ZGM: } public static function initAlipay() { config(array('latrell-alipay.partner_id' => config('pay.alipay.partnerId'), 'latrell-alipay.seller_id' => config('pay.alipay.sellerId'), 'latrell-alipay-web.key' => config('pay.alipay.key'), 'latrell-alipay-web.return_url' => action('\\Module\\PayCenter\\Web\\Controller\\ReturnController@index', array('payType' => PayType::ALIPAY)), 'latrell-alipay-web.notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::ALIPAY)))); } public static function alipayWebConfig() { return array('use_sandbox' => false, 'app_id' => modstart_config()->getWithEnv('payAlipayWebAppId'), 'sign_type' => 'RSA2', 'ali_public_key' => modstart_config()->getWithEnv('payAlipayWebAliPublicKey'), 'rsa_private_key' => modstart_config()->getWithEnv('payAlipayWebRSAPrivateKey'), 'limit_pay' => array(), 'notify_url' => action('\\Module\\PayCenter\\Web\\Controller\\NotifyController@index', array('payType' => PayType::ALIPAY_WEB)), 'return_url' => action('\\Module\\PayCenter\\Web\\Controller\\ReturnController@index', array('payType' => PayType::ALIPAY_WEB)), 'return_raw' => true); } private static function createAlipayWeb($XdWpe, $l9M__, $InfBU) { goto eY7qr; aYdo2: $GeXSC = array(); goto PB_HD; rZMR3: return Response::generate(0, 'ok', $GeXSC); goto qGxX1; eY7qr: $qc0K6 = self::alipayWebConfig(); goto iVBgc; iKWhy: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now())); goto aYdo2; HMjll: try { $OuCnz = Charge::run(Config::ALI_CHANNEL_WEB, $qc0K6, $iJW2y); } catch (\Exception $knlzD) { return Response::generate(-1, '创建支付错误(' . $knlzD->getMessage() . ')'); } goto iKWhy; iVBgc: $iJW2y = array('body' => Str::limit(AlipayUtil::filterSpecialChars($XdWpe['body']), 200), 'subject' => Str::limit(AlipayUtil::filterSpecialChars($XdWpe['body']), 100), 'order_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'], 'timeout_express' => time() + 3600 * 24, 'amount' => $XdWpe['feeTotal'], 'return_param' => '', 'goods_type' => '0', 'store_id' => '', 'qr_mod' => ''); goto HMjll; JR2RZ: $GeXSC['successRedirect'] = $XdWpe['redirect']; goto rZMR3; PB_HD: $GeXSC['payLink'] = $OuCnz; goto JR2RZ; qGxX1: } private static function createAlipayMobile($XdWpe, $l9M__, $InfBU) { goto A_D4z; VYqFz: return Response::generate(0, 'ok', $GeXSC); goto LhrSC; mKmqM: $GeXSC['successRedirect'] = $XdWpe['redirect']; goto VYqFz; tGINC: $GeXSC = array(); goto UFT5I; YDI9t: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now())); goto tGINC; A_D4z: $qc0K6 = self::alipayWebConfig(); goto opWZd; zxkdc: try { $OuCnz = Charge::run(Config::ALI_CHANNEL_WAP, $qc0K6, $iJW2y); } catch (\Exception $knlzD) { return Response::generate(-1, '创建支付错误(' . $knlzD->getMessage() . ')'); } goto YDI9t; UFT5I: $GeXSC['payLink'] = $OuCnz; goto mKmqM; opWZd: $iJW2y = array('body' => Str::limit(AlipayUtil::filterSpecialChars($XdWpe['body']), 200), 'subject' => Str::limit(AlipayUtil::filterSpecialChars($XdWpe['body']), 100), 'order_no' => config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id'], 'timeout_express' => time() + 3600 * 24, 'amount' => $XdWpe['feeTotal'], 'return_param' => '', 'goods_type' => '0', 'store_id' => '', 'qr_mod' => ''); goto zxkdc; LhrSC: } private static function createMemberMoney($XdWpe, $l9M__, $InfBU) { goto yxtvq; q9JzF: if ($u_fWR < $XdWpe['feeTotal']) { return Response::generateError('余额不足'); } goto aNzYt; BuEqu: ModelUtil::transactionBegin(); goto ciagc; Xqk5M: $BEdDh = PayOrderUtil::handleOrderPay(PayType::MEMBER_MONEY, config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id']); goto T5JLD; v_uM6: $u_fWR = MemberMoneyUtil::getTotal($MqkYF); goto q9JzF; aU3r4: return Response::generate(0, '支付成功', array('redirect' => $XdWpe['redirect'])); goto QGsEe; yxtvq: $MqkYF = $InfBU['memberUserId']; goto v_uM6; T5JLD: if (Response::isError($BEdDh)) { return $BEdDh; } goto aU3r4; ciagc: try { MemberMoneyUtil::change($MqkYF, -$XdWpe['feeTotal'], $XdWpe['body']); ModelUtil::transactionCommit(); } catch (\Exception $knlzD) { ModelUtil::transactionRollback(); return Response::generateError('支付失败，请重试'); } goto Xqk5M; aNzYt: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now())); goto BuEqu; QGsEe: } private static function createAlipay($XdWpe, $l9M__, $InfBU) { goto oFxZv; TVqbj: $GeXSC['successRedirect'] = $XdWpe['redirect']; goto AjST_; Ms4em: $YYF2P->setSubject(Str::limit($XdWpe['body'], 200)); goto e_3ka; UnpVO: self::update($XdWpe['id'], array('status' => PayOrderStatus::CREATED, 'payType' => $l9M__, 'timePayCreated' => Carbon::now())); goto AhfPQ; e_3ka: $YYF2P->setBody(Str::limit($XdWpe['body'], 100)); goto UnpVO; AhfPQ: $GeXSC = array(); goto x6GMq; AjST_: return Response::generate(0, 'ok', $GeXSC); goto DO0D4; GxS9I: if (!empty($InfBU['alipay_wap'])) { $YYF2P = app('alipay.wap'); } else { $YYF2P = app('alipay.web'); } goto SpCSY; SpCSY: $YYF2P->setOutTradeNo(config('pay.payOrderOutTradeNoPrefix') . '_' . $XdWpe['id']); goto asleO; asleO: $YYF2P->setTotalFee($XdWpe['feeTotal']); goto Ms4em; oFxZv: self::initAlipay(); goto GgQFO; x6GMq: $GeXSC['payLink'] = $YYF2P->getPayLink(); goto TVqbj; GgQFO: if (!config('latrell-alipay.partner_id') || !config('latrell-alipay.seller_id') || !config('latrell-alipay-web.key')) { return Response::generate(-1, '支付宝配置错误'); } goto GxS9I; DO0D4: } public static function getOrderByOutTradeNo($I7OQF) { goto SHp6M; Sj_ho: if (count($DDm9v) != 2) { return Response::generate(-1, 'outTradeNo error'); } goto xGdOp; eUxkl: BizException::throwsIf('order not found', empty($IfVKl)); goto tdXma; SHp6M: $DDm9v = explode('_', $I7OQF); goto Sj_ho; tdXma: return Response::generateSuccessData(array('order' => $IfVKl)); goto Q2cxZ; V5gMA: if ($SzUCG != config('pay.payOrderOutTradeNoPrefix')) { return Response::generate(-1, 'outTradeNo prefix not match'); } goto nThGh; xGdOp: $SzUCG = $DDm9v[0]; goto wIfnB; nThGh: $IfVKl = ModelUtil::get('pay_order', array('id' => $IPYm0)); goto eUxkl; wIfnB: $IPYm0 = $DDm9v[1]; goto V5gMA; Q2cxZ: } public static function handleOrderPay($S3IJB, $I7OQF, $O0Krq = array()) { goto YxevJ; aR1C8: $SzUCG = $DDm9v[0]; goto q3OrM; q3OrM: $IPYm0 = $DDm9v[1]; goto QqLEI; C5o0t: $DDm9v = explode('_', $I7OQF); goto urPgz; tVE75: return Response::generate(0, null, array('order' => $IfVKl)); goto x62N1; hWnTh: $IfVKl = null; goto Nm0IW; qGVG2: ModelUtil::decodeRecordJson($IfVKl, 'param'); goto tVE75; QqLEI: if ($SzUCG != config('pay.payOrderOutTradeNoPrefix')) { return Response::generate(-1, 'outTradeNo prefix not match'); } goto XfxfW; UkVz8: if ($uzyB0) { goto gnoIm; uzFnJ: Log::info('PayCenter.HandleOrderPay.OrderPayedEvent - ' . json_encode($yY11E, JSON_UNESCAPED_UNICODE)); goto LyJME; d2LeV: EventUtil::fire($yY11E); goto uzFnJ; oAnm8: $yY11E->biz = $IfVKl['biz']; goto jmRSK; jmRSK: $yY11E->bizId = $IfVKl['bizId']; goto dOvuj; dOvuj: $yY11E->order = $IfVKl; goto d2LeV; gnoIm: $yY11E = new OrderPayedEvent(); goto oAnm8; LyJME: } goto H2iNh; urPgz: if (count($DDm9v) != 2 && count($DDm9v) != 3) { return Response::generate(-1, 'outTradeNo error'); } goto aR1C8; YxevJ: $uzyB0 = false; goto hWnTh; XfxfW: try { goto ZM1z3; XW9O8: if (empty($IfVKl)) { ModelUtil::transactionCommit(); return Response::generate(-1, 'order not found'); } goto rixrW; KGzxG: ModelUtil::transactionCommit(); goto XCp2D; ZM1z3: ModelUtil::transactionBegin(); goto TGdjv; TGdjv: $IfVKl = ModelUtil::getWithLock('pay_order', array('id' => $IPYm0)); goto XW9O8; rixrW: if ($IfVKl['status'] == PayOrderStatus::CREATED) { goto oQr5_; mtsFf: ModelUtil::update('pay_order', array('id' => $IfVKl['id']), array_merge(array('status' => PayOrderStatus::PAYED, 'timePay' => Carbon::now()), $O0Krq)); goto xKbGj; oQr5_: Log::info('PayCenter.HandleOrderPay.UpdateOrderToPayed - ' . $I7OQF); goto mtsFf; xKbGj: $uzyB0 = true; goto gJa0K; gJa0K: } else { Log::info('PayCenter.HandleOrderPay.Status - ' . $IfVKl['status']); if (!empty($O0Krq)) { ModelUtil::update('pay_order', array('id' => $IfVKl['id']), $O0Krq); } } goto KGzxG; XCp2D: } catch (\Exception $knlzD) { Log::error('PayCenter.HandleOrderPay.Error - ' . $knlzD->getMessage()); ModelUtil::transactionRollback(); } goto UkVz8; H2iNh: ModelUtil::update('pay_order', $IfVKl['id'], array('eventNotified' => true)); goto qGVG2; Nm0IW: Log::info('PayOrderNotify - ' . $S3IJB . ' - ' . $I7OQF); goto C5o0t; x62N1: } }