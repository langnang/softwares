<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Payment\Common\Ali; use GuzzleHttp\Client; use InvalidArgumentException; use Payment\Common\AliConfig; use Payment\Common\BaseData; use Payment\Common\BaseStrategy; use Payment\Common\PayException; use Payment\Config; use Payment\Utils\ArrayUtil; use Payment\Utils\Rsa2Encrypt; use Payment\Utils\RsaEncrypt; use Payment\Utils\StrUtil; abstract class AliBaseStrategy implements BaseStrategy { protected $method; protected $config; protected $reqData; public function __construct(array $qc0K6) { try { $this->config = new AliConfig($qc0K6); } catch (PayException $knlzD) { throw $knlzD; } } public function handle(array $GeXSC) { goto VeJqb; Jywge: $this->reqData->setSign(); goto vudNb; VeJqb: $FjIu5 = $this->getBuildDataClass(); goto HUTTz; yUE1L: return $this->retData($GeXSC); goto VI_kq; HUTTz: try { $this->reqData = new $FjIu5($this->config, $GeXSC); } catch (PayException $knlzD) { throw $knlzD; } goto Jywge; vudNb: $GeXSC = $this->reqData->getData(); goto yUE1L; VI_kq: } protected function retData(array $GeXSC) { goto CVPE4; CVPE4: $GtgYE = $GeXSC['sign']; goto xqpg1; ddKnC: foreach ($GeXSC as &$WZC9G) { $WZC9G = StrUtil::characet($WZC9G, $this->config->charset); } goto FoiJK; yyC12: return $GeXSC; goto hr8xt; FoiJK: $GeXSC['sign'] = $GtgYE; goto yyC12; NUzev: $GeXSC = ArrayUtil::arraySort($GeXSC); goto ddKnC; xqpg1: $GeXSC = ArrayUtil::removeKeys($GeXSC, array('sign')); goto NUzev; hr8xt: } protected function sendReq(array $GeXSC, $XXre6 = 'GET') { goto Vmrle; lqLvG: $VhHmv = $tYsZE->getBody()->getContents(); goto z3H6z; kD5DL: $XXre6 = strtoupper($XXre6); goto NQ0eu; o1k1f: $Htiwb = str_ireplace('.', '_', $this->config->method) . '_response'; goto xxY0B; Y9kf3: if ($XXre6 === 'GET') { $m7iz2 = array('query' => $GeXSC, 'http_errors' => false); } elseif ($XXre6 === 'POST') { $m7iz2 = array('form_params' => $GeXSC, 'http_errors' => false); } goto QVuhD; A6Dq3: $gSChU = $this->verifySign($VhHmv[$Htiwb], $VhHmv['sign']); goto oyFh0; NQ0eu: $m7iz2 = array(); goto Y9kf3; oyFh0: if (!$gSChU) { throw new PayException('支付宝返回数据被篡改。请检查网络是否安全！'); } goto yPjSZ; Vmrle: $QkJ1i = new Client(array('base_uri' => $this->config->getewayUrl, 'timeout' => '10.0')); goto kD5DL; yPjSZ: return $VhHmv[$Htiwb]; goto riMBU; vOl3m: if ($tYsZE->getStatusCode() != '200') { throw new PayException('网络发生错误，请稍后再试curl返回码：' . $tYsZE->getReasonPhrase()); } goto lqLvG; z3H6z: try { $VhHmv = \GuzzleHttp\json_decode($VhHmv, true); } catch (InvalidArgumentException $knlzD) { throw new PayException('返回数据 json 解析失败'); } goto o1k1f; xxY0B: if (!isset($VhHmv[$Htiwb])) { throw new PayException('支付宝系统故障或非法请求'); } goto A6Dq3; QVuhD: $tYsZE = $QkJ1i->request($XXre6, '', $m7iz2); goto vOl3m; riMBU: } protected function verifySign(array $GeXSC, $GtgYE) { $V3tE3 = \GuzzleHttp\json_encode($GeXSC, JSON_UNESCAPED_UNICODE); if ($this->config->signType === 'RSA') { $KHNS_ = new RsaEncrypt($this->config->rsaAliPubKey); return $KHNS_->rsaVerify($V3tE3, $GtgYE); } elseif ($this->config->signType === 'RSA2') { $KHNS_ = new Rsa2Encrypt($this->config->rsaAliPubKey); return $KHNS_->rsaVerify($V3tE3, $GtgYE); } else { return false; } } protected function getTradeStatus($M0y01) { switch ($M0y01) { case 'TRADE_SUCCESS': case 'TRADE_FINISHED': return Config::TRADE_STATUS_SUCC; case 'WAIT_BUYER_PAY': case 'TRADE_CLOSED': default: return Config::TRADE_STATUS_FAILD; } } }