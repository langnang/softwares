<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Latrell\Alipay\Web; class SdkPayment { private $__gateway_new = 'https://mapi.alipay.com/gateway.do?'; private $__https_verify_url = 'https://mapi.alipay.com/gateway.do?service=notify_verify&'; private $__http_verify_url = 'http://notify.alipay.com/trade/notify_query.do?'; private $service = 'create_direct_pay_by_user'; private $partner; private $_input_charset = 'UTF-8'; private $sign_type = 'MD5'; private $notify_url; private $return_url; private $out_trade_no; private $payment_type = 1; private $seller_id; private $total_fee; private $subject; private $body; private $it_b_pay; private $show_url; private $anti_phishing_key; private $exter_invoke_ip; private $key; private $transport; private $cacert; private $qr_pay_mode; public function __construct() { $this->cacert = getcwd() . '/../cacert.pem'; } public function getPayLink() { goto LMMMZ; c2uDp: return $this->__gateway_new . $this->createLinkstringUrlencode($zTYjj); goto u1bGb; LMMMZ: $mV4w9 = array('service' => $this->service, 'partner' => $this->partner, 'payment_type' => $this->payment_type, 'notify_url' => $this->notify_url, 'return_url' => $this->return_url, 'seller_email' => $this->seller_id, 'out_trade_no' => $this->out_trade_no, 'subject' => $this->subject, 'total_fee' => $this->total_fee, 'body' => $this->body, 'it_b_pay' => $this->it_b_pay, 'show_url' => $this->show_url, 'anti_phishing_key' => $this->anti_phishing_key, 'exter_invoke_ip' => $this->exter_invoke_ip, '_input_charset' => strtolower($this->_input_charset), 'qr_pay_mode' => $this->qr_pay_mode); goto r5ql1; r5ql1: $zTYjj = $this->buildRequestPara($mV4w9); goto c2uDp; u1bGb: } public function verify() { goto tDpiZ; tDpiZ: if (empty($_POST) && empty($_GET)) { return false; } goto n9r7d; wTojm: if (preg_match('/true$/i', $perp2) && $BAn8j) { return true; } else { return false; } goto UBg1y; v48wx: $BAn8j = $this->getSignVeryfy($GeXSC, $GeXSC['sign']); goto uIlIu; uzIWO: if (!empty($GeXSC['notify_id'])) { $perp2 = $this->getResponse($GeXSC['notify_id']); } goto wTojm; n9r7d: $GeXSC = $_POST ?: $_GET; goto v48wx; uIlIu: $perp2 = 'true'; goto uzIWO; UBg1y: } public function setPartner($S25ZG) { $this->partner = $S25ZG; return $this; } public function setNotifyUrl($n_tXj) { $this->notify_url = $n_tXj; return $this; } public function setReturnUrl($DdDG6) { $this->return_url = $DdDG6; return $this; } public function setOutTradeNo($gZ4BZ) { $this->out_trade_no = $gZ4BZ; return $this; } public function setKey($Mlv3V) { $this->key = $Mlv3V; return $this; } public function setSellerId($Mr1kc) { $this->seller_id = $Mr1kc; return $this; } public function setTotalFee($lUE_H) { $this->total_fee = $lUE_H; return $this; } public function setSubject($yXTtD) { $this->subject = $yXTtD; return $this; } public function setBody($VhHmv) { $this->body = $VhHmv; return $this; } public function setItBPay($VTVBB) { $this->it_b_pay = $VTVBB; return $this; } public function setShowUrl($foKPc) { $this->show_url = $foKPc; return $this; } public function setSignType($TdBl6) { $this->sign_type = $TdBl6; return $this; } public function setExterInvokeIp($lKTR8) { $this->exter_invoke_ip = $lKTR8; return $this; } public function setQrPayMode($lpket) { $this->qr_pay_mode = $lpket; return $this; } private function buildRequestPara($Rd7XL) { goto eeKOd; IiJdw: $tCLsi = $this->argSort($YpHgU); goto gypGb; GUlGQ: return $tCLsi; goto L_CaO; eeKOd: $YpHgU = $this->paraFilter($Rd7XL); goto IiJdw; MbI_R: $tCLsi['sign'] = $FXazb; goto FhRaR; gypGb: $FXazb = $this->buildRequestMysign($tCLsi); goto MbI_R; FhRaR: $tCLsi['sign_type'] = strtoupper(trim($this->sign_type)); goto GUlGQ; L_CaO: } private function paraFilter($zTYjj) { goto SrMWd; SrMWd: $YpHgU = array(); goto ZsCjH; ZBles: return $YpHgU; goto pDFH7; ZsCjH: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { if ($Mlv3V == 'sign' || $Mlv3V == 'sign_type' || $o48Br == '') { continue; } else { $YpHgU[$Mlv3V] = $zTYjj[$Mlv3V]; } } goto ZBles; pDFH7: } private function argSort($zTYjj) { goto nFRTC; nFRTC: ksort($zTYjj); goto q6B54; M0Ugt: return $zTYjj; goto CgM07; q6B54: reset($zTYjj); goto M0Ugt; CgM07: } private function buildRequestMysign($tCLsi) { goto dMVMQ; LpWSK: switch (strtoupper(trim($this->sign_type))) { case 'MD5': $FXazb = $this->md5Sign($bRMSe, $this->key); break; default: $FXazb = ''; } goto N3Nth; ZvxyQ: $FXazb = ''; goto LpWSK; dMVMQ: $bRMSe = $this->createLinkstring($tCLsi); goto ZvxyQ; N3Nth: return $FXazb; goto fNCex; fNCex: } private function createLinkstring($zTYjj) { goto u4LIQ; u4LIQ: $uLyCu = ''; goto nuL0i; JgTP_: $uLyCu = substr($uLyCu, 0, count($uLyCu) - 2); goto DaPvw; nuL0i: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { $uLyCu .= $Mlv3V . '=' . $o48Br . '&'; } goto JgTP_; DaPvw: if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { $uLyCu = stripslashes($uLyCu); } goto VWfL1; VWfL1: return $uLyCu; goto Faha0; Faha0: } private function createLinkstringUrlencode($zTYjj) { goto CgZC9; CgZC9: $uLyCu = ''; goto AEYM8; z_HxK: $uLyCu = substr($uLyCu, 0, count($uLyCu) - 2); goto isJv2; AEYM8: while ((list($Mlv3V, $o48Br) = each($zTYjj)) == true) { $uLyCu .= $Mlv3V . '=' . urlencode($o48Br) . '&'; } goto z_HxK; qz7TR: return $uLyCu; goto k9QGy; isJv2: if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { $uLyCu = stripslashes($uLyCu); } goto qz7TR; k9QGy: } private function md5Sign($bRMSe, $Mlv3V) { $bRMSe = $bRMSe . $Mlv3V; return md5($bRMSe); } private function md5Verify($bRMSe, $GtgYE, $Mlv3V) { goto lfClQ; l20pG: $PVV9N = md5($bRMSe); goto EOWx5; lfClQ: $bRMSe = $bRMSe . $Mlv3V; goto l20pG; EOWx5: if ($PVV9N == $GtgYE) { return true; } else { return false; } goto NqFMv; NqFMv: } private function getSignVeryfy($Rd7XL, $GtgYE) { goto EbTnh; zmqr6: $bRMSe = $this->createLinkstring($tCLsi); goto jgKUe; AL23c: return $L2mpU; goto DDcfW; jgKUe: $L2mpU = false; goto jfEfw; EbTnh: $YpHgU = $this->paraFilter($Rd7XL); goto JVvqD; JVvqD: $tCLsi = $this->argSort($YpHgU); goto zmqr6; jfEfw: switch (strtoupper(trim($this->sign_type))) { case 'MD5': $L2mpU = $this->md5Verify($bRMSe, $GtgYE, $this->key); break; default: $L2mpU = false; } goto AL23c; DDcfW: } private function getResponse($oPug3) { goto lOY1N; DOdXi: $perp2 = $this->getHttpResponseGET($bjkop, $this->cacert); goto ljKBN; ljKBN: return $perp2; goto zXaSP; EdvAG: if ($m3RVl == 'https') { $bjkop = $this->__https_verify_url; } else { $bjkop = $this->__http_verify_url; } goto OvocG; blDIu: $bjkop = ''; goto EdvAG; OvocG: $bjkop = $bjkop . 'partner=' . $S25ZG . '&notify_id=' . $oPug3; goto DOdXi; WRLgZ: $S25ZG = trim($this->partner); goto blDIu; lOY1N: $m3RVl = strtolower(trim($this->transport)); goto WRLgZ; zXaSP: } private function getHttpResponseGET($OuCnz, $r4p4f) { goto HjsJ8; rIwz3: return $MTtyC; goto ijsX0; FbHYZ: curl_close($I2m2i); goto rIwz3; HjsJ8: $I2m2i = curl_init($OuCnz); goto jEzlm; qOpVX: curl_setopt($I2m2i, CURLOPT_SSL_VERIFYPEER, true); goto sjFG3; FuGi0: curl_setopt($I2m2i, CURLOPT_CAINFO, $r4p4f); goto ZQThv; sjFG3: curl_setopt($I2m2i, CURLOPT_SSL_VERIFYHOST, 2); goto FuGi0; jEzlm: curl_setopt($I2m2i, CURLOPT_HEADER, 0); goto rM6Xi; ZQThv: $MTtyC = curl_exec($I2m2i); goto FbHYZ; rM6Xi: curl_setopt($I2m2i, CURLOPT_RETURNTRANSFER, 1); goto qOpVX; ijsX0: } }