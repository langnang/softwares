<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\Member\Api\Controller; use Illuminate\Support\Facades\Session; use Illuminate\Support\Str; use ModStart\Core\Exception\BizException; use ModStart\Core\Input\InputPackage; use ModStart\Core\Input\Request; use ModStart\Core\Input\Response; use ModStart\Core\Util\CurlUtil; use ModStart\Core\Util\EventUtil; use ModStart\Core\Util\FileUtil; use ModStart\Misc\Captcha\CaptchaFacade; use ModStart\Module\ModuleBaseController; use Module\Member\Config\MemberOauth; use Module\Member\Events\MemberUserLoginedEvent; use Module\Member\Events\MemberUserPasswordResetedEvent; use Module\Member\Events\MemberUserRegisteredEvent; use Module\Member\Oauth\AbstractOauth; use Module\Member\Provider\RegisterProcessor\AbstractMemberRegisterProcessorProvider; use Module\Member\Provider\RegisterProcessor\MemberRegisterProcessorProvider; use Module\Member\Util\MemberUtil; use Module\Vendor\Email\MailSendJob; use Module\Vendor\Provider\Captcha\CaptchaProvider; use Module\Vendor\Session\SessionUtil; use Module\Vendor\Sms\SmsUtil; use Module\Vendor\Support\ResponseCodes; class AuthController extends ModuleBaseController { public function checkRedirectSafety($R7X4g) { goto FWB6R; MtLsn: $S_IYY = array_filter($S_IYY); goto capWe; I73FU: $zoCJb = parse_url($R7X4g); goto H6iu4; dbilY: BizException::throws('登录跳转路径异常'); goto AMse9; FWB6R: if (!modstart_config('Member_LoginRedirectCheckEnable', false)) { return; } goto I73FU; capWe: foreach ($S_IYY as $qlKQK) { if ($zoCJb['host'] == $qlKQK) { return; } } goto dbilY; xAvMq: $S_IYY = modstart_config('Member_LoginRedirectWhiteList', ''); goto TkoQu; TkoQu: $S_IYY = explode('
', $S_IYY); goto MtLsn; iiWZ1: if ($zoCJb['host'] == Request::domain()) { return; } goto xAvMq; H6iu4: if (empty($zoCJb['host'])) { return; } goto iiWZ1; AMse9: } public function oauthTryLogin($bMuGA = null) { goto PMrKw; pfUGH: BizException::throwsIfEmpty('授权类型为空', $bMuGA); goto Qo1Dq; MLHwJ: if (empty($bMuGA)) { $nIp2z = InputPackage::buildFromInput(); $bMuGA = $nIp2z->getTrimString('type'); } goto pfUGH; HmElo: BizException::throwsIfResponseError($ULXwZ); goto P1QiI; ilBnr: return Response::generate(0, null, array('memberUserId' => 0)); goto rc7No; PMrKw: $oyra5 = Session::get('oauthUserInfo', array()); goto w_K_s; w_K_s: if (empty($oyra5)) { return Response::generate(-1, '用户授权数据为空'); } goto MLHwJ; P1QiI: if ($ULXwZ['data']['memberUserId'] > 0) { goto VCTld; WplYf: Session::forget('oauthUserInfo'); goto Lo8pp; VCTld: Session::put('memberUserId', $ULXwZ['data']['memberUserId']); goto WplYf; Lo8pp: return Response::generateSuccessData(array('memberUserId' => $ULXwZ['data']['memberUserId'])); goto tCcsg; tCcsg: } goto ilBnr; pSe8f: $ULXwZ = $dxcjQ->processTryLogin(array('userInfo' => $oyra5)); goto HmElo; Qo1Dq: $dxcjQ = MemberOauth::getOrFail($bMuGA); goto pSe8f; rc7No: } public function oauthBind($bMuGA = null) { goto EOCMA; AFGHY: if (!empty($oyra5['avatar'])) { goto kyP5C; LysM_: if (!empty($m7s5I)) { if (empty($gggvu)) { $gggvu = 'jpg'; } MemberUtil::setAvatar($XK7hT, $m7s5I, $gggvu); } goto s6N0e; Jxzlf: $m7s5I = CurlUtil::getRaw($oyra5['avatar']); goto LysM_; kyP5C: $gggvu = FileUtil::extension($oyra5['avatar']); goto Jxzlf; s6N0e: } goto UoHCB; kmK7T: if (modstart_config('Member_OauthBindEmailEnable')) { $OSIrT['emailVerified'] = true; } goto GGofl; lgblQ: if (modstart_config('Member_OauthBindEmailEnable')) { goto wgBSt; wgBSt: if (empty($qAkQN)) { return Response::generate(-1, '请输入邮箱'); } goto JjzKe; L_k3P: if ($qAkQN != Session::get('oauthBindEmail')) { return Response::generate(-1, '两次邮箱不一致'); } goto wFABY; JjzKe: if ($A2Lpw != Session::get('oauthBindEmailVerify')) { return Response::generate(-1, '邮箱验证码不正确.'); } goto Pdvwf; Pdvwf: if (Session::get('oauthBindEmailVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '邮箱验证码已过期'); } goto L_k3P; wFABY: } goto EnQ0p; fau2V: Session::forget('oauthUserInfo'); goto PLS3l; Hh4mB: if ($ULXwZ['code']) { return Response::generate(-1, $ULXwZ['msg']); } goto shxBb; iF5fY: $eZXtQ = $nIp2z->getTrimString('username'); goto RoJC8; EnQ0p: $ULXwZ = MemberUtil::register($eZXtQ, $TR7J6, $qAkQN, null, true); goto Hh4mB; SC87Y: if (!SessionUtil::atomicConsume('oauthBindCaptchaPassCount')) { return Response::generate(-1, '请重新输入图片验证码'); } goto pw5X4; nAj6R: $QC1dN = Session::get('memberUserId', 0); goto MSoTJ; DDl8l: $qAkQN = $nIp2z->getEmail('email'); goto g0Bbr; KNGkl: $R7X4g = $nIp2z->getTrimString('redirect', modstart_web_url('member')); goto L0cDQ; pw5X4: if (modstart_config('Member_OauthBindPhoneEnable')) { goto oJCOI; oZ3Ww: if ($TR7J6 != Session::get('oauthBindPhone')) { return Response::generate(-1, '两次手机不一致'); } goto ZVHcQ; AyD5w: if (Session::get('oauthBindPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '手机验证码已过期'); } goto oZ3Ww; oJCOI: if (empty($TR7J6)) { return Response::generate(-1, '请输入手机'); } goto Gl23u; Gl23u: if ($eCMq2 != Session::get('oauthBindPhoneVerify')) { return Response::generate(-1, '手机验证码不正确.'); } goto AyD5w; ZVHcQ: } goto lgblQ; CyDAj: EventUtil::fire(new MemberUserRegisteredEvent($XK7hT)); goto AFGHY; RoJC8: if (Str::contains($eZXtQ, '@')) { return Response::generate(-1, '用户名不能包含特殊字符'); } goto WP12F; L0cDQ: $bMuGA = $nIp2z->getTrimString('type', $bMuGA); goto q6a0n; C1dHf: BizException::throwsIfResponseError($ULXwZ); goto CyDAj; F2rwc: if (modstart_config('Member_OauthBindPhoneEnable')) { $OSIrT['phoneVerified'] = true; } goto kmK7T; cW2hh: if (empty($oyra5)) { return Response::generate(-1, '用户授权数据为空'); } goto iaTsZ; osJtY: $ULXwZ = $dxcjQ->processTryLogin(array('userInfo' => $oyra5)); goto W8mio; kaHrv: $Bvi48 = $nIp2z->getTrimString('captcha'); goto A4Pt1; MSoTJ: if ($QC1dN > 0) { goto dg9wB; dg9wB: $ULXwZ = $dxcjQ->processBindToUser(array('memberUserId' => $QC1dN, 'userInfo' => $oyra5)); goto VVo2t; VVo2t: BizException::throwsIfResponseError($ULXwZ); goto HjSP6; HjSP6: Session::forget('oauthUserInfo'); goto Bx3sV; Bx3sV: return Response::generate(0, null, null, $R7X4g); goto bSDeh; bSDeh: } goto osJtY; GjTOV: $TR7J6 = $nIp2z->getPhone('phone'); goto EhVQM; EOCMA: $nIp2z = InputPackage::buildFromInput(); goto KNGkl; h8F3p: if ($ULXwZ['data']['memberUserId'] > 0) { goto qgw1q; iyaJW: Session::forget('oauthUserInfo'); goto dknRC; qgw1q: Session::put('memberUserId', $ULXwZ['data']['memberUserId']); goto iyaJW; dknRC: return Response::generateSuccessData(array('memberUserId' => $ULXwZ['data']['memberUserId'])); goto R7PLB; R7PLB: } goto gnPVS; g0Bbr: $A2Lpw = $nIp2z->getTrimString('emailVerify'); goto kaHrv; W8mio: BizException::throwsIfResponseError($ULXwZ); goto h8F3p; WP12F: if (preg_match('/^\\d{11}$/', $eZXtQ)) { return Response::generate(-1, '用户名不能为纯数字'); } goto GjTOV; iaTsZ: $dxcjQ = MemberOauth::getOrFail($bMuGA); goto nAj6R; GGofl: $OSIrT['registerIp'] = Request::ip(); goto j01L1; q6a0n: $oyra5 = Session::get('oauthUserInfo', array()); goto cW2hh; EhVQM: $eCMq2 = $nIp2z->getTrimString('phoneVerify'); goto DDl8l; j01L1: if (!empty($OSIrT)) { MemberUtil::update($XK7hT, $OSIrT); } goto DKa_3; fozBL: $OSIrT = array(); goto F2rwc; DKa_3: $ULXwZ = $dxcjQ->processBindToUser(array('memberUserId' => $XK7hT, 'userInfo' => $oyra5)); goto C1dHf; UoHCB: Session::put('memberUserId', $XK7hT); goto fau2V; gnPVS: if (modstart_config()->getWithEnv('registerDisable', false) && !modstart_config()->getWithEnv('registerOauthEnable', false)) { return Response::generate(-1, '用户注册已禁用'); } goto iF5fY; shxBb: $XK7hT = $ULXwZ['data']['id']; goto fozBL; PLS3l: return Response::generate(0, null); goto I6szG; A4Pt1: if (!Session::get('oauthBindCaptchaPass', false)) { if (!CaptchaFacade::check($Bvi48)) { SessionUtil::atomicProduce('oauthBindCaptchaPassCount', 1); return Response::generate(-1, '图片验证失败'); } } goto SC87Y; I6szG: } public function oauthCallback($bMuGA = null, $LcMnE = null) { goto SxAy0; oSkfS: $dxcjQ = MemberOauth::getOrFail($bMuGA); goto vKLj0; Pm1Y7: $M1iJt = $nIp2z->getBoolean('view', false); goto HYXqc; LfV6Y: if (empty($LcMnE)) { $LcMnE = $nIp2z->getTrimString('callback', null); } goto baiAb; I6kjA: $ULXwZ = $dxcjQ->processLogin(array_merge($EeGOj, array('code' => $mMcWS, 'callback' => $LcMnE))); goto XznKU; d72iT: if (empty($mMcWS)) { return Response::generate(-1, '登录失败(code为空)', null, '/'); } goto oSkfS; XznKU: if (!isset($ULXwZ['code'])) { return Response::generate(-1, '登录失败(返回结果为空)'); } goto ECXuz; wigfL: if (empty($mMcWS)) { $mMcWS = $nIp2z->getTrimString('auth_code'); } goto d72iT; DePDe: Session::put('oauthUserInfo', $cSXlN); goto L3szv; bTN1a: $cSXlN = $ULXwZ['data']['userInfo']; goto Pm1Y7; L3szv: return Response::generate(0, 'ok', array('user' => $cSXlN)); goto V4KGW; HYXqc: if ($M1iJt) { Session::put('oauthViewOpenId_' . $bMuGA, $cSXlN['openid']); return Response::generateSuccess(); } goto DePDe; SxAy0: $nIp2z = InputPackage::buildFromInput(); goto hQhRi; hQhRi: if (empty($bMuGA)) { $bMuGA = $nIp2z->getTrimString('type'); } goto LfV6Y; ECXuz: if (0 != $ULXwZ['code']) { return $ULXwZ; } goto bTN1a; gl4Dx: Session::forget('oauthLoginParam'); goto I6kjA; baiAb: $mMcWS = $nIp2z->getTrimString('code'); goto wigfL; vKLj0: $EeGOj = Session::get('oauthLoginParam', array()); goto gl4Dx; V4KGW: } public function oauthLogin($bMuGA = null, $LcMnE = null) { goto ZaSLp; wkGoP: if (empty($bMuGA)) { $bMuGA = $nIp2z->getTrimString('type'); } goto VikBT; VikBT: if (empty($LcMnE)) { $LcMnE = $nIp2z->getTrimString('callback', 'NO_CALLBACK'); } goto sz6lD; sz6lD: $iQ3Dx = $nIp2z->getBoolean('silence', false); goto fi3JV; dLDvk: $ULXwZ = $dxcjQ->processRedirect($EeGOj); goto OAzph; OAzph: BizException::throwsIfResponseError($ULXwZ); goto MXtwU; OrIfK: $EeGOj = array('callback' => $LcMnE, 'silence' => $iQ3Dx); goto vSFoj; ZaSLp: if ($Odu2K = modstart_config()->getWithEnv('oauthDisableText')) { return Response::generateError($Odu2K); } goto Q32Eu; fi3JV: $dxcjQ = MemberOauth::getOrFail($bMuGA); goto OrIfK; vSFoj: Session::put('oauthLoginParam', $EeGOj); goto dLDvk; Q32Eu: $nIp2z = InputPackage::buildFromInput(); goto wkGoP; MXtwU: return Response::generate(0, 'ok', array('redirect' => $ULXwZ['data']['redirect'])); goto BcgoE; BcgoE: } public function ssoClientLogoutPrepare() { goto PUi7K; Dxu5_: $LMucY = $nIp2z->getTrimString('domainUrl'); goto od7jG; pIucc: if (empty($fqP1J)) { return Response::generate(-1, '请配置 同步登录服务端地址'); } goto e6a1d; e6a1d: $R7X4g = $fqP1J . '_logout' . '?' . http_build_query(array('redirect' => $LMucY . '/sso/client_logout')); goto RlH26; QpwnE: $nIp2z = InputPackage::buildFromInput(); goto Dxu5_; RlH26: return Response::generate(0, 'ok', array('redirect' => $R7X4g)); goto SOiqP; od7jG: $fqP1J = modstart_config('ssoClientServer', ''); goto pIucc; PUi7K: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, '请开启 同步登录客户端'); } goto QpwnE; SOiqP: } public function ssoClientLogout() { goto ZZUw5; ZZUw5: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, '请开启 同步登录客户端'); } goto KtMdz; UaJnt: return Response::generate(0, 'ok'); goto eagu3; KtMdz: Session::forget('memberUserId'); goto UaJnt; eagu3: } public function ssoServerLogout() { goto kks2u; Obpec: return Response::generate(0, 'ok'); goto FY8yY; BXcKP: Session::forget('memberUserId'); goto Obpec; kks2u: if (!modstart_config('ssoServerEnable', false)) { return Response::generate(-1, '请开启 同步登录服务端'); } goto BXcKP; FY8yY: } public function ssoServerSuccess() { goto KVokW; OxaAG: if (!$Ja8fn) { return Response::generate(-1, '数据错误(2)'); } goto ePm48; Unqgz: if (empty($R8PlR)) { return Response::generate(-1, '请设置 同步登录服务端通讯秘钥'); } goto TRd19; k7ylU: $TxlOc = md5(md5($R8PlR) . md5($CrMTL . '') . md5($IHSIr) . md5($eZXtQ)); goto pSQtV; T2kQ0: $CrMTL = time(); goto Mthc6; KVokW: if (!modstart_config('ssoServerEnable', false)) { return Response::generate(-1, '请开启 同步登录服务端'); } goto hjmjN; pSQtV: $R7X4g = $NDOpI . '?server=' . urlencode($IHSIr) . '&timestamp=' . $CrMTL . '&username=' . urlencode(base64_encode($eZXtQ)) . '&sign=' . $TxlOc; goto wc1Zl; JBOy5: foreach ($vscoJ as $qlKQK) { if (trim($qlKQK) == $NDOpI) { $Ja8fn = true; } } goto OxaAG; WQSpB: $OYXQL = MemberUtil::get($XK7hT); goto keZeb; gSpFI: if (!$XK7hT) { return Response::generate(-1, '未登录'); } goto WQSpB; Mthc6: $eZXtQ = $OYXQL['username']; goto k7ylU; yQAeX: $NDOpI = $nIp2z->getTrimString('client'); goto b4Zdd; wc1Zl: return Response::generate(0, null, array('redirect' => $R7X4g)); goto LT2hB; jAg5E: $Ja8fn = false; goto JBOy5; o_dEw: $vscoJ = explode('
', modstart_config('ssoServerClientList', '')); goto jAg5E; TRd19: $nIp2z = InputPackage::buildFromInput(); goto yQAeX; b4Zdd: $LMucY = $nIp2z->getTrimString('domainUrl'); goto CZlLz; hjmjN: $XK7hT = Session::get('memberUserId', 0); goto gSpFI; ePm48: $IHSIr = $LMucY . '/sso/server'; goto T2kQ0; keZeb: $R8PlR = modstart_config('ssoServerSecret'); goto Unqgz; CZlLz: if (empty($LMucY) || empty($NDOpI)) { return Response::generate(-1, '数据错误'); } goto o_dEw; LT2hB: } public function ssoServer() { goto OvccC; GAThs: if (intval(Session::get('memberUserId', 0)) > 0) { $Z1fh3 = true; } goto Ex0LR; Iwd9z: if (empty($TxlOc)) { return Response::generate(-1, 'sign 为空'); } goto XgVJL; XgVJL: $z5GXK = modstart_config('ssoServerSecret'); goto GUMsW; ZXMro: foreach ($vscoJ as $qlKQK) { if (trim($qlKQK) == $NDOpI) { $Ja8fn = true; } } goto jHF2i; cunPO: $Ja8fn = false; goto ZXMro; jHF2i: if (!$Ja8fn) { return Response::generate(-1, '请在 同步登陆服务端增加客户端地址 ' . $NDOpI); } goto Q9HbU; XJjVs: $NDOpI = $nIp2z->getTrimString('client'); goto rqYRz; OvccC: if (!modstart_config('ssoServerEnable', false)) { return Response::generate(-1, '请开启 同步登录服务端'); } goto AG_JT; M3gzS: $vscoJ = explode('
', modstart_config('ssoServerClientList', '')); goto cunPO; IOJYy: if (abs(time() - $CrMTL) > 3600) { return Response::generate(-1, 'timestamp 错误'); } goto M3gzS; GUMsW: if (empty($z5GXK)) { return Response::generate(-1, '请设置 同步登录服务端通讯秘钥'); } goto phJrr; phJrr: $hyRQi = md5(md5($z5GXK) . md5($CrMTL . '') . md5($NDOpI)); goto cOV0v; Q9HbU: $Z1fh3 = false; goto GAThs; kXh7u: if (empty($CrMTL)) { return Response::generate(-1, 'timestamp 为空'); } goto Iwd9z; AG_JT: $nIp2z = InputPackage::buildFromInput(); goto XJjVs; Wb4Ib: if (empty($NDOpI)) { return Response::generate(-1, 'client 为空'); } goto kXh7u; dWZol: $TxlOc = $nIp2z->getTrimString('sign'); goto Wb4Ib; rqYRz: $CrMTL = $nIp2z->getInteger('timestamp'); goto dWZol; cOV0v: if ($TxlOc != $hyRQi) { return Response::generate(-1, 'sign 错误'); } goto IOJYy; Ex0LR: return Response::generate(0, 'ok', array('isLogin' => $Z1fh3)); goto o1vwY; o1vwY: } public function ssoClient() { goto CAs_u; dCyvP: if ($TxlOc != $hyRQi) { return Response::generate(-1, 'sign错误'); } goto q99_D; gsWvs: $eZXtQ = @base64_decode($nIp2z->getTrimString('username')); goto MeGJL; CAs_u: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, '请开启 同步登录客户端'); } goto CTlZx; MeGJL: if (empty($eZXtQ)) { return Response::generate(-1, '同步登录返回的用户名为空'); } goto ZPf5G; ehMHR: if (empty($TxlOc)) { return Response::generate(-1, 'sign为空'); } goto Jp5Ca; ZPf5G: if (empty($CrMTL)) { return Response::generate(-1, 'timestamp为空'); } goto ehMHR; skxFN: Session::put('memberUserId', $OYXQL['id']); goto H8WCo; q99_D: if (abs(time() - $CrMTL) > 3600) { return Response::generate(-1, 'timestamp错误'); } goto tx3TY; o_Rm3: $yjsgk = modstart_config('ssoClientSecret'); goto EzvwY; CEMk_: $IHSIr = $nIp2z->getTrimString('server'); goto I0cZW; mzbFY: if (empty($OYXQL)) { goto pRZ1l; td_UE: $OYXQL = MemberUtil::get($ULXwZ['data']['id']); goto RyfAS; pRZ1l: $ULXwZ = MemberUtil::register($eZXtQ, null, null, null, true); goto y4ooi; y4ooi: if ($ULXwZ['code']) { return Response::generate(-1, $ULXwZ['msg']); } goto td_UE; RyfAS: } goto skxFN; Z1Rmc: $nIp2z = InputPackage::buildFromInput(); goto CEMk_; tx3TY: if ($IHSIr != $fqP1J) { return Response::generate(-1, '同步登录 服务端地址不是配置的' . $fqP1J); } goto PcD51; PcD51: $OYXQL = MemberUtil::getByUsername($eZXtQ); goto mzbFY; irueK: if (empty($fqP1J)) { return Response::generate(-1, '请配置 同步登录服务端地址'); } goto o_Rm3; EzvwY: if (empty($yjsgk)) { return Response::generate(-1, '请设置 同步登录客户端通讯秘钥'); } goto Z1Rmc; Tmjl6: $TxlOc = $nIp2z->getTrimString('sign'); goto gsWvs; I0cZW: $CrMTL = $nIp2z->getInteger('timestamp'); goto Tmjl6; H8WCo: return Response::generate(0, 'ok'); goto luTNN; CTlZx: $fqP1J = modstart_config('ssoClientServer', ''); goto irueK; Jp5Ca: $hyRQi = md5(md5($yjsgk) . md5($CrMTL . '') . md5($IHSIr) . md5($eZXtQ)); goto dCyvP; luTNN: } public function ssoClientPrepare() { goto rjdUd; xvrVp: return Response::generate(0, 'ok', array('redirect' => $R7X4g)); goto hG15_; iLoze: $CrMTL = time(); goto p9Aq0; rjdUd: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, 'SSO未开启'); } goto F7EHO; F7EHO: $fqP1J = modstart_config('ssoClientServer'); goto NR8rO; SAWY1: if (!Str::endsWith($NDOpI, '/sso/client')) { return Response::generate(-1, 'client参数错误'); } goto iLoze; p9Aq0: $TxlOc = md5(md5($yjsgk) . md5($CrMTL . '') . md5($NDOpI)); goto yOgnM; WwlMk: $nIp2z = InputPackage::buildFromInput(); goto V8ISn; NR8rO: $yjsgk = modstart_config('ssoClientSecret'); goto WwlMk; V8ISn: $NDOpI = $nIp2z->getTrimString('client', '/'); goto SAWY1; yOgnM: $R7X4g = $fqP1J . '?client=' . urlencode($NDOpI) . '&timestamp=' . $CrMTL . '&sign=' . $TxlOc; goto xvrVp; hG15_: } public function logout() { Session::forget('memberUserId'); return Response::generateSuccess(); } public function login() { goto tfaN8; BCB7H: if (!$OYXQL) { $ULXwZ = MemberUtil::login($eZXtQ, null, null, $AAh3w); if (0 == $ULXwZ['code']) { $OYXQL = $ULXwZ['data']; } } goto kE7ir; SvrXl: $Bl1Ak = null; goto BCB7H; bQYNW: return Response::generateSuccess(); goto NOqRB; dc6rF: if (!$OYXQL) { $ULXwZ = MemberUtil::login(null, null, $eZXtQ, $AAh3w); if (0 == $ULXwZ['code']) { $OYXQL = $ULXwZ['data']; } } goto XSAsY; da304: if (modstart_config('loginCaptchaEnable', false)) { $nmy95 = modstart_config('loginCaptchaProvider', null); if ($nmy95) { $ULXwZ = CaptchaProvider::get($nmy95)->validate(); if (Response::isError($ULXwZ)) { return $ULXwZ; } } else { if (!CaptchaFacade::check($nIp2z->getTrimString('captcha'))) { return Response::generate(ResponseCodes::CAPTCHA_ERROR, '登录失败:图片验证码错误', null, '[js]$(\'[data-captcha]\').click();'); } } } goto A_8Os; kE7ir: if (!$OYXQL) { $ULXwZ = MemberUtil::login(null, $eZXtQ, null, $AAh3w); if (0 == $ULXwZ['code']) { $OYXQL = $ULXwZ['data']; } } goto dc6rF; XSAsY: if (!$OYXQL) { $QZzFQ = Session::pull('memberUserLoginFailedTip', null); return Response::generate(ResponseCodes::CAPTCHA_ERROR, '登录失败:用户或密码错误' . ($QZzFQ ? '，' . $QZzFQ : '')); } goto bYAvs; VQV7U: if (empty($AAh3w)) { return Response::generate(-1, '请输入密码'); } goto da304; kpTVm: if (empty($eZXtQ)) { return Response::generate(-1, '请输入用户'); } goto VQV7U; tfaN8: $nIp2z = InputPackage::buildFromInput(); goto aqOHZ; bjh8J: $AAh3w = $nIp2z->getTrimString('password'); goto kpTVm; aqOHZ: $eZXtQ = $nIp2z->getTrimString('username'); goto bjh8J; bYAvs: Session::put('memberUserId', $OYXQL['id']); goto q65Yk; A_8Os: $OYXQL = null; goto SvrXl; q65Yk: EventUtil::fire(new MemberUserLoginedEvent($OYXQL['id'])); goto bQYNW; NOqRB: } public function loginCaptchaRaw() { return CaptchaFacade::create('default'); } public function loginPhoneCaptchaRaw() { return CaptchaFacade::create('default'); } public function loginPhone() { goto ia1XY; uO8OX: $TR7J6 = $nIp2z->getPhone('phone'); goto Lgwyg; P4Rrg: if (empty($RiYZz)) { return Response::generate(-1, '验证码不能为空'); } goto a2cgR; pQC3C: if (Session::get('loginPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(0, '手机验证码已过期'); } goto fu8d_; Lgwyg: $RiYZz = $nIp2z->getTrimString('verify'); goto cgFnM; UhTwi: Session::forget('loginPhone'); goto Hg5zr; ia1XY: if (!modstart_config('Member_LoginPhoneEnable', false)) { return Response::generate(-1, '手机快捷登录未开启'); } goto fUKyr; cuo6a: $OYXQL = MemberUtil::getByPhone($TR7J6); goto IXeH6; hVCuU: if (empty($OYXQL)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto k2rMx; CN1GA: Session::forget('loginPhoneVerifyTime'); goto UhTwi; pKW7d: EventUtil::fire(new MemberUserLoginedEvent($OYXQL)); goto oKtSX; oKtSX: return Response::generate(0, null); goto HynEx; k2rMx: Session::forget('loginPhoneVerify'); goto CN1GA; Hg5zr: Session::put('memberUserId', $OYXQL['id']); goto pKW7d; IXeH6: if (empty($OYXQL) && modstart_config('Member_LoginPhoneAutoRegister', false)) { goto jgiG6; yQQKM: $OSIrT = array(); goto VUylN; Y3SeW: $XK7hT = $ULXwZ['data']['id']; goto bR1Xr; VbZOu: $OSIrT['registerIp'] = Request::ip(); goto khQ8Y; Rds0F: $OYXQL = MemberUtil::get($XK7hT); goto LMpU4; bR1Xr: MemberUtil::autoSetUsernameNickname($XK7hT, modstart_config('Member_LoginPhoneNameSuggest', '用户')); goto yQQKM; xLsWg: Session::forget('registerCaptchaPass'); goto czbs3; QGlc5: $ULXwZ = MemberUtil::register(null, $TR7J6, null, null, true); goto ROAlp; VUylN: $OSIrT['phoneVerified'] = true; goto VbZOu; ROAlp: if ($ULXwZ['code']) { return Response::generate(-1, $ULXwZ['msg']); } goto Y3SeW; AcO72: EventUtil::fire(new MemberUserRegisteredEvent($XK7hT)); goto xLsWg; khQ8Y: if (!empty($OSIrT)) { MemberUtil::update($XK7hT, $OSIrT); } goto AcO72; czbs3: foreach (MemberRegisterProcessorProvider::listAll() as $C9q3Y) { $C9q3Y->postProcess($XK7hT); } goto Rds0F; jgiG6: foreach (MemberRegisterProcessorProvider::listAll() as $C9q3Y) { $ULXwZ = $C9q3Y->preCheck(); if (Response::isError($ULXwZ)) { return $ULXwZ; } } goto QGlc5; LMpU4: } goto hVCuU; fUKyr: $nIp2z = InputPackage::buildFromInput(); goto uO8OX; fu8d_: if ($TR7J6 != Session::get('loginPhone')) { return Response::generate(-1, '两次手机不一致'); } goto cuo6a; a2cgR: if ($RiYZz != Session::get('loginPhoneVerify')) { return Response::generate(-1, '手机验证码不正确'); } goto pQC3C; cgFnM: if (empty($TR7J6)) { return Response::generate(-1, '手机为空或不正确'); } goto P4Rrg; HynEx: } public function loginPhoneVerify() { goto K_LUD; iQ3DD: if (!CaptchaFacade::check($Bvi48)) { return Response::generate(-1, '图片验证码错误'); } goto PMp7i; ggC04: Session::put('loginPhoneVerifyTime', time()); goto oPgQw; oPgQw: Session::put('loginPhone', $TR7J6); goto hVzss; uPmz4: $RiYZz = rand(100000, 999999); goto SSqW1; jOMdh: $nIp2z = InputPackage::buildFromInput(); goto aJH80; aC4qS: if (Session::get('loginPhoneVerifyTime') && $TR7J6 == Session::get('loginPhone')) { if (Session::get('loginPhoneVerifyTime') + 60 > time()) { return Response::generate(-1, '验证码发送频繁，请稍后再试!'); } } goto uPmz4; hVzss: SmsUtil::send($TR7J6, 'verify', array('code' => $RiYZz)); goto CfH_S; jeKeU: $Bvi48 = $nIp2z->getTrimString('captcha'); goto iQ3DD; SSqW1: Session::put('loginPhoneVerify', $RiYZz); goto ggC04; CfH_S: return Response::generate(0, '验证码发送成功'); goto ZtyAG; DySjc: if (empty($OYXQL) && !modstart_config('Member_LoginPhoneAutoRegister', false)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto aC4qS; cgEpN: if (empty($TR7J6)) { return Response::generate(-1, '手机为空或格式不正确'); } goto jeKeU; K_LUD: if (!modstart_config('Member_LoginPhoneEnable', false)) { return Response::generate(-1, '手机快捷登录未开启'); } goto jOMdh; aJH80: $TR7J6 = $nIp2z->getPhone('target'); goto cgEpN; PMp7i: $OYXQL = MemberUtil::getByPhone($TR7J6); goto DySjc; ZtyAG: } public function loginPhoneCaptcha() { $Bvi48 = $this->loginCaptchaRaw(); return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($Bvi48->getOriginalContent()))); } public function loginCaptcha() { $Bvi48 = $this->loginCaptchaRaw(); return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($Bvi48->getOriginalContent()))); } public function registerPhone() { goto Z0xQf; X6lcv: $OSIrT['phoneVerified'] = true; goto DconR; EiO7W: Session::put('memberUserId', $XK7hT); goto f0z6V; Z0xQf: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto z84OD; eTkUc: $eCMq2 = $nIp2z->getTrimString('phoneVerify'); goto gGmyK; f0z6V: EventUtil::fire(new MemberUserLoginedEvent($XK7hT)); goto rLPht; EDL5S: if (!empty($OSIrT)) { MemberUtil::update($XK7hT, $OSIrT); } goto I3azq; MNbk5: foreach (MemberRegisterProcessorProvider::listAll() as $C9q3Y) { $ULXwZ = $C9q3Y->preCheck(); if (Response::isError($ULXwZ)) { return $ULXwZ; } } goto BH0dg; DconR: $OSIrT['registerIp'] = Request::ip(); goto EDL5S; jBOvs: $XK7hT = $ULXwZ['data']['id']; goto T1i6H; bp3W2: if ($ULXwZ['code']) { return Response::generate(-1, $ULXwZ['msg']); } goto jBOvs; vPceM: if ($TR7J6 != Session::get('registerPhone')) { return Response::generate(-1, '两次手机不一致'); } goto MNbk5; Nsbz2: foreach (MemberRegisterProcessorProvider::listAll() as $C9q3Y) { $C9q3Y->postProcess($XK7hT); } goto EiO7W; F8wq2: if ($eCMq2 != Session::get('registerPhoneVerify')) { return Response::generate(-1, '手机验证码不正确.'); } goto zANNj; rLPht: return Response::generate(0, '注册成功', array('id' => $XK7hT)); goto Pxvv4; gGmyK: if (empty($TR7J6)) { return Response::generate(-1, '请输入手机'); } goto F8wq2; ORm7b: $TR7J6 = $nIp2z->getPhone('phone'); goto eTkUc; dL45x: if (modstart_config('Member_AgreementEnable', false)) { if (!$nIp2z->getBoolean('agreement')) { return Response::generateError('请先同意 ' . modstart_config('Member_AgreementTitle', '用户使用协议')); } } goto ORm7b; T1i6H: MemberUtil::autoSetUsernameNickname($XK7hT, modstart_config('Member_LoginPhoneNameSuggest', '用户')); goto OylqW; z84OD: if (!modstart_config('Member_RegisterPhoneEnable', false)) { return Response::generate(-1, '手机快速注册未开启'); } goto pWxea; zANNj: if (Session::get('registerPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '手机验证码已过期'); } goto vPceM; OylqW: $OSIrT = array(); goto X6lcv; KK7x5: Session::forget('registerCaptchaPass'); goto Nsbz2; BH0dg: $ULXwZ = MemberUtil::register(null, $TR7J6, null, null, true); goto bp3W2; I3azq: EventUtil::fire(new MemberUserRegisteredEvent($XK7hT)); goto KK7x5; pWxea: $nIp2z = InputPackage::buildFromInput(); goto dL45x; Pxvv4: } public function register() { goto S300I; Du0X3: return Response::generate(0, '注册成功', array('id' => $XK7hT)); goto nZn0q; zfJRz: if (modstart_config('registerPhoneEnable')) { goto JwPVQ; dEdKu: if ($eCMq2 != Session::get('registerPhoneVerify')) { return Response::generate(-1, '手机验证码不正确.'); } goto Go9PB; JwPVQ: if (empty($TR7J6)) { return Response::generate(-1, '请输入手机'); } goto dEdKu; Go9PB: if (Session::get('registerPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '手机验证码已过期'); } goto U_PGk; U_PGk: if ($TR7J6 != Session::get('registerPhone')) { return Response::generate(-1, '两次手机不一致'); } goto qhxHl; qhxHl: } goto Ejwkw; hjy0d: $nIp2z = InputPackage::buildFromInput(); goto f6kak; nbvYk: if (Str::contains($eZXtQ, '@')) { return Response::generate(-1, '用户名不能包含特殊字符'); } goto YcDFM; O9ZXG: $ULXwZ = MemberUtil::register($eZXtQ, $TR7J6, $qAkQN, $AAh3w); goto KlpUC; tyGQb: $Bvi48 = $nIp2z->getTrimString('captcha'); goto zWnPX; W4ny3: $qAkQN = $nIp2z->getEmail('email'); goto IDeqj; vIOvs: $OSIrT = array(); goto qJAOV; S300I: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto hjy0d; qJAOV: if (modstart_config('registerPhoneEnable')) { $OSIrT['phoneVerified'] = true; } goto kGnYJ; ZnGeV: $TR7J6 = $nIp2z->getPhone('phone'); goto bE0Mb; KlpUC: if ($ULXwZ['code']) { return Response::generate(-1, $ULXwZ['msg']); } goto yipvv; IDeqj: $A2Lpw = $nIp2z->getTrimString('emailVerify'); goto F9Kw2; Ejwkw: if (modstart_config('registerEmailEnable')) { goto OCkYu; OCkYu: if (empty($qAkQN)) { return Response::generate(-1, '请输入邮箱'); } goto DQHZm; wpHSg: if (Session::get('registerEmailVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '邮箱验证码已过期'); } goto rriT8; rriT8: if ($qAkQN != Session::get('registerEmail')) { return Response::generate(-1, '两次邮箱不一致'); } goto NTGr2; DQHZm: if ($A2Lpw != Session::get('registerEmailVerify')) { return Response::generate(-1, '邮箱验证码不正确.'); } goto wpHSg; NTGr2: } goto Z9Bw1; CC8Ro: $eZXtQ = $nIp2z->getTrimString('username'); goto ZnGeV; twIPS: EventUtil::fire(new MemberUserRegisteredEvent($XK7hT)); goto WS610; uYKsu: $OSIrT['registerIp'] = Request::ip(); goto WKUoq; tvlFs: $qK70i = $nIp2z->getTrimString('passwordRepeat'); goto tyGQb; zWnPX: if (empty($eZXtQ)) { return Response::generate(-1, '用户名不能为空'); } goto nbvYk; WS610: Session::forget('registerCaptchaPass'); goto uRgMa; dXunp: foreach (MemberRegisterProcessorProvider::listAll() as $C9q3Y) { $ULXwZ = $C9q3Y->preCheck(); if (Response::isError($ULXwZ)) { return $ULXwZ; } } goto O9ZXG; ZFO6O: if (!Session::get('registerCaptchaPass', false)) { if (!CaptchaFacade::check($Bvi48)) { SessionUtil::atomicProduce('registerCaptchaPassCount', 1); return Response::generate(-1, '图片验证失败'); } } goto So9tB; kGnYJ: if (modstart_config('registerEmailEnable')) { $OSIrT['emailVerified'] = true; } goto uYKsu; YcDFM: if (preg_match('/^\\d{11}$/', $eZXtQ)) { return Response::generate(-1, '用户名不能为纯数字'); } goto ZFO6O; f6kak: if (modstart_config('Member_AgreementEnable', false)) { if (!$nIp2z->getBoolean('agreement')) { return Response::generateError('请先同意 ' . modstart_config('Member_AgreementTitle', '用户使用协议')); } } goto CC8Ro; Z9Bw1: if (empty($AAh3w)) { return Response::generate(-1, '请输入密码'); } goto GF9N7; bE0Mb: $eCMq2 = $nIp2z->getTrimString('phoneVerify'); goto W4ny3; uRgMa: foreach (MemberRegisterProcessorProvider::listAll() as $C9q3Y) { $C9q3Y->postProcess($XK7hT); } goto Du0X3; WKUoq: if (!empty($OSIrT)) { MemberUtil::update($XK7hT, $OSIrT); } goto twIPS; F9Kw2: $AAh3w = $nIp2z->getTrimString('password'); goto tvlFs; So9tB: if (!SessionUtil::atomicConsume('registerCaptchaPassCount')) { return Response::generate(-1, '请重新输入图片验证码'); } goto zfJRz; GF9N7: if ($AAh3w != $qK70i) { return Response::generate(-1, '两次输入密码不一致'); } goto dXunp; yipvv: $XK7hT = $ULXwZ['data']['id']; goto vIOvs; nZn0q: } public function registerEmailVerify() { goto Y2jAv; DsX1p: MailSendJob::create($qAkQN, '注册账户验证码', 'verify', array('code' => $RiYZz)); goto gtEFp; jmhCz: $nIp2z = InputPackage::buildFromInput(); goto VNfXv; i_bXw: if (empty($qAkQN)) { return Response::generate(-1, '邮箱不能为空'); } goto vXpdX; smt0M: Session::put('registerEmail', $qAkQN); goto ITSJB; F5O_q: if (!modstart_config('registerEmailEnable')) { return Response::generate(-1, '注册未开启邮箱'); } goto jmhCz; pFlqE: if (!empty($OYXQL)) { return Response::generate(-1, '邮箱已经被占用'); } goto uepbE; uepbE: if (Session::get('registerEmailVerifyTime') && $qAkQN == Session::get('registerEmail')) { if (Session::get('registerEmailVerifyTime') + 60 > time()) { return Response::generate(-1, '验证码发送频繁，请稍后再试!'); } } goto Wa00D; ITSJB: return Response::generate(0, '验证码发送成功'); goto yHwTw; VNfXv: $qAkQN = $nIp2z->getEmail('target'); goto i_bXw; vXpdX: if (!Session::get('registerCaptchaPass', false)) { return Response::generate(-1, '请先验证图片验证码'); } goto OItT2; OItT2: if (!SessionUtil::atomicConsume('registerCaptchaPassCount')) { return Response::generate(-1, '请重新输入图片验证码'); } goto YwXF4; fSzLV: Session::put('registerEmailVerifyTime', time()); goto smt0M; Y2jAv: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto F5O_q; Wa00D: $RiYZz = rand(100000, 999999); goto DsX1p; YwXF4: $OYXQL = MemberUtil::getByEmail($qAkQN); goto pFlqE; gtEFp: Session::put('registerEmailVerify', $RiYZz); goto fSzLV; yHwTw: } public function registerPhoneVerify() { goto fma1R; Lq1kR: if (Session::get('registerPhoneVerifyTime') && $TR7J6 == Session::get('registerPhone')) { if (Session::get('registerPhoneVerifyTime') + 60 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto IRozn; n_r3f: $TR7J6 = $nIp2z->getPhone('target'); goto prdot; z2h1a: $ULXwZ = SmsUtil::send($TR7J6, 'verify', array('code' => $RiYZz)); goto leRr0; V9sDz: $OYXQL = MemberUtil::getByPhone($TR7J6); goto wIz0Q; leRr0: if (Response::isError($ULXwZ)) { return $ULXwZ; } goto eiwI0; Ia7Qj: if (!modstart_config('registerPhoneEnable')) { return Response::generate(-1, '注册未开启手机'); } goto PznnP; eiwI0: Session::put('registerPhoneVerify', $RiYZz); goto wODMH; prdot: if (empty($TR7J6)) { return Response::generate(-1, '手机不能为空'); } goto ybMYd; alSbY: Session::put('registerPhone', $TR7J6); goto vLh7o; IRozn: $RiYZz = rand(100000, 999999); goto z2h1a; PznnP: $nIp2z = InputPackage::buildFromInput(); goto n_r3f; pL0d9: if (!SessionUtil::atomicConsume('registerCaptchaPassCount')) { return Response::generate(-1, '请重新输入图片验证码'); } goto V9sDz; wODMH: Session::put('registerPhoneVerifyTime', time()); goto alSbY; vLh7o: return Response::generate(0, '验证码发送成功'); goto Zhgnn; fma1R: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto Ia7Qj; ybMYd: if (!Session::get('registerCaptchaPass', false)) { return Response::generate(-1, '请先验证图片验证码'); } goto pL0d9; wIz0Q: if (!empty($OYXQL)) { return Response::generate(-1, '手机已经被占用'); } goto Lq1kR; Zhgnn: } public function registerCaptchaVerify() { goto p200V; xb1Jm: SessionUtil::atomicProduce('registerCaptchaPassCount', $oEAR4); goto uSeH2; H5UHF: Session::put('registerCaptchaPass', true); goto pwDLN; mxeXU: $Bvi48 = $nIp2z->getTrimString('captcha'); goto Fqe_n; K8nkY: if (modstart_config('registerPhoneEnable')) { $oEAR4++; } goto xb1Jm; uSeH2: return Response::generateSuccess(); goto EzCkt; pwDLN: $oEAR4 = 1; goto hsWO6; hsWO6: if (modstart_config('registerEmailEnable')) { $oEAR4++; } goto K8nkY; Fqe_n: if (!CaptchaFacade::check($Bvi48)) { SessionUtil::atomicRemove('registerCaptchaPassCount'); return Response::generate(ResponseCodes::CAPTCHA_ERROR, '验证码错误'); } goto H5UHF; p200V: $nIp2z = InputPackage::buildFromInput(); goto mxeXU; EzCkt: } public function oauthBindCaptchaVerify() { goto CUDMF; fgYFt: if (modstart_config('Member_OauthBindEmailEnable')) { $s9bEx++; } goto emsfI; F0ElS: if (!CaptchaFacade::check($Bvi48)) { SessionUtil::atomicRemove('oauthBindCaptchaPassCount'); return Response::generate(ResponseCodes::CAPTCHA_ERROR, '验证码错误'); } goto kCrGz; CUDMF: $nIp2z = InputPackage::buildFromInput(); goto gGhJz; gGhJz: $Bvi48 = $nIp2z->getTrimString('captcha'); goto F0ElS; J8CHd: if (modstart_config('Member_OauthBindPhoneEnable')) { $s9bEx++; } goto fgYFt; lbXDq: return Response::generateSuccess(); goto R7ShD; kCrGz: Session::put('oauthBindCaptchaPass', true); goto DayNR; emsfI: SessionUtil::atomicProduce('oauthBindCaptchaPassCount', $s9bEx); goto lbXDq; DayNR: $s9bEx = 1; goto J8CHd; R7ShD: } public function oauthBindCaptchaRaw() { return CaptchaFacade::create('default'); } public function oauthBindCaptcha() { goto kkvQZ; dIM9g: return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($Bvi48->getOriginalContent()))); goto KcZGY; XDoli: $Bvi48 = $this->oauthBindCaptchaRaw(); goto dIM9g; kkvQZ: Session::forget('oauthBindCaptchaPass'); goto XDoli; KcZGY: } public function oauthBindEmailVerify() { goto nEIEc; wz0kQ: if (empty($qAkQN)) { return Response::generate(-1, '邮箱不能为空'); } goto NG1kr; E7GL7: return Response::generate(0, '验证码发送成功'); goto evPay; F2E7M: $OYXQL = MemberUtil::getByEmail($qAkQN); goto UZP7F; reqxY: MailSendJob::create($qAkQN, '注册账户验证码', 'verify', array('code' => $RiYZz)); goto L64uv; UZP7F: if (!empty($OYXQL)) { return Response::generate(-1, '邮箱已经被占用'); } goto mIB8f; M5BMP: Session::put('oauthBindEmail', $qAkQN); goto E7GL7; UnsYq: $qAkQN = $nIp2z->getEmail('target'); goto wz0kQ; C5PH3: if (!SessionUtil::atomicConsume('oauthBindCaptchaPassCount')) { return Response::generate(-1, '请重新输入图片验证码'); } goto F2E7M; pgK2t: $nIp2z = InputPackage::buildFromInput(); goto UnsYq; Eh2CN: $RiYZz = rand(100000, 999999); goto reqxY; mIB8f: if (Session::get('oauthBindEmailVerifyTime') && $qAkQN == Session::get('oauthBindEmail')) { if (Session::get('oauthBindEmailVerifyTime') + 60 > time()) { return Response::generate(-1, '验证码发送频繁，请稍后再试!'); } } goto Eh2CN; NG1kr: if (!Session::get('oauthBindCaptchaPass', false)) { return Response::generate(-1, '请先验证图片验证码'); } goto C5PH3; jtGsa: Session::put('oauthBindEmailVerifyTime', time()); goto M5BMP; L64uv: Session::put('oauthBindEmailVerify', $RiYZz); goto jtGsa; nEIEc: if (!modstart_config('Member_OauthBindEmailEnable')) { return Response::generate(-1, '授权登录未开启邮箱'); } goto pgK2t; evPay: } public function oauthBindPhoneVerify() { goto bqdyx; L0gEO: return Response::generate(0, '验证码发送成功'); goto w2XXa; RPe7J: Session::put('oauthBindPhoneVerify', $RiYZz); goto IiM1V; oWLGe: if (Session::get('oauthBindPhoneVerifyTime') && $TR7J6 == Session::get('oauthBindPhone')) { if (Session::get('oauthBindPhoneVerifyTime') + 60 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto Vqui_; qbcyu: $OYXQL = MemberUtil::getByPhone($TR7J6); goto D7_E2; bqdyx: if (!modstart_config('Member_OauthBindPhoneEnable')) { return Response::generate(-1, '注册未开启手机'); } goto gaV0H; vpJ61: if (Response::isError($ULXwZ)) { return $ULXwZ; } goto RPe7J; gaV0H: $nIp2z = InputPackage::buildFromInput(); goto TcZqa; D7_E2: if (!empty($OYXQL)) { return Response::generate(-1, '手机已经被占用'); } goto oWLGe; TcZqa: $TR7J6 = $nIp2z->getPhone('target'); goto YvRwE; YvRwE: if (empty($TR7J6)) { return Response::generate(-1, '手机不能为空'); } goto mWd7L; JBPWa: if (!SessionUtil::atomicConsume('oauthBindCaptchaPassCount')) { return Response::generate(-1, '请重新输入图片验证码'); } goto qbcyu; Vv2sf: Session::put('oauthBindPhone', $TR7J6); goto L0gEO; mWd7L: if (!Session::get('oauthBindCaptchaPass', false)) { return Response::generate(-1, '请先验证图片验证码'); } goto JBPWa; IiM1V: Session::put('oauthBindPhoneVerifyTime', time()); goto Vv2sf; Vqui_: $RiYZz = rand(100000, 999999); goto XsZaq; XsZaq: $ULXwZ = SmsUtil::send($TR7J6, 'verify', array('code' => $RiYZz)); goto vpJ61; w2XXa: } public function registerCaptchaRaw() { return CaptchaFacade::create('default'); } public function registerCaptcha() { goto y2OI6; HpHoi: $Bvi48 = $this->registerCaptchaRaw(); goto vaL1h; vaL1h: return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($Bvi48->getOriginalContent()))); goto vKA6S; y2OI6: Session::forget('registerCaptchaPass'); goto HpHoi; vKA6S: } public function retrievePhone() { goto DCEi_; aaVsh: $RiYZz = $nIp2z->getTrimString('verify'); goto Va0s3; nLi_P: return Response::generate(0, null); goto Pe7cC; hWzF5: if (empty($RiYZz)) { return Response::generate(-1, '验证码不能为空'); } goto IKxOG; PFUOy: Session::put('retrieveMemberUserId', $OYXQL['id']); goto nLi_P; zEN2E: $nIp2z = InputPackage::buildFromInput(); goto eyfl_; eyfl_: if (!modstart_config('retrievePhoneEnable', false)) { return Response::generate(-1, '找回密码没有开启'); } goto f9YVW; n1Ykm: if (empty($OYXQL)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto vRUTb; uF4vQ: if (Session::get('retrievePhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(0, '手机验证码已过期'); } goto OTrdJ; f9YVW: $TR7J6 = $nIp2z->getPhone('phone'); goto aaVsh; Va0s3: if (empty($TR7J6)) { return Response::generate(-1, '手机为空或不正确'); } goto hWzF5; OTrdJ: if ($TR7J6 != Session::get('retrievePhone')) { return Response::generate(-1, '两次手机不一致'); } goto oiZUN; ckAQ0: Session::forget('retrievePhoneVerifyTime'); goto uNBWQ; vRUTb: Session::forget('retrievePhoneVerify'); goto ckAQ0; IKxOG: if ($RiYZz != Session::get('retrievePhoneVerify')) { return Response::generate(-1, '手机验证码不正确'); } goto uF4vQ; DCEi_: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto zEN2E; uNBWQ: Session::forget('retrievePhone'); goto PFUOy; oiZUN: $OYXQL = MemberUtil::getByPhone($TR7J6); goto n1Ykm; Pe7cC: } public function retrievePhoneVerify() { goto B1Zu1; X0Tnt: $RiYZz = rand(100000, 999999); goto h8Bqk; hi3mq: $Bvi48 = $nIp2z->getTrimString('captcha'); goto nZZlY; eO3s7: $nIp2z = InputPackage::buildFromInput(); goto BVLyM; pOzc0: Session::put('retrievePhone', $TR7J6); goto Os2LN; vV2JN: Session::put('retrievePhoneVerifyTime', time()); goto pOzc0; Os2LN: SmsUtil::send($TR7J6, 'verify', array('code' => $RiYZz)); goto PXY9y; PXY9y: return Response::generate(0, '验证码发送成功'); goto jeptC; S9T0Z: if (Session::get('retrievePhoneVerifyTime') && $TR7J6 == Session::get('retrievePhone')) { if (Session::get('retrievePhoneVerifyTime') + 60 * 2 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto X0Tnt; B1Zu1: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto eO3s7; nZZlY: if (!CaptchaFacade::check($Bvi48)) { return Response::generate(-1, '图片验证码错误'); } goto CuHnK; h8Bqk: Session::put('retrievePhoneVerify', $RiYZz); goto vV2JN; x3jyO: if (empty($OYXQL)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto S9T0Z; BVLyM: $TR7J6 = $nIp2z->getPhone('target'); goto W93g3; W93g3: if (empty($TR7J6)) { return Response::generate(-1, '手机为空或格式不正确'); } goto hi3mq; CuHnK: $OYXQL = MemberUtil::getByPhone($TR7J6); goto x3jyO; jeptC: } public function retrieveEmail() { goto zCOnI; V1b_j: if (!modstart_config('retrieveEmailEnable', false)) { return Response::generate(-1, '找回密码没有开启'); } goto l4kSd; hf4OG: if (empty($OYXQL)) { return Response::generate(-1, '邮箱没有绑定任何账号'); } goto PQQa7; GXwE2: $OYXQL = MemberUtil::getByEmail($qAkQN); goto hf4OG; zCOnI: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto V1b_j; LCdRi: Session::forget('retrieveEmailVerifyTime'); goto rEgYR; fBZMf: if ($RiYZz != Session::get('retrieveEmailVerify')) { return Response::generate(-1, '邮箱验证码不正确'); } goto gyden; gyden: if (Session::get('retrieveEmailVerifyTime') + 60 * 60 < time()) { return Response::generate(0, '邮箱验证码已过期'); } goto LJ8Ub; VJE4c: $RiYZz = $nIp2z->getTrimString('verify'); goto NKMrQ; v67ZD: return Response::generate(0, null); goto kIcA2; aK_fB: $qAkQN = $nIp2z->getEmail('email'); goto VJE4c; LJ8Ub: if ($qAkQN != Session::get('retrieveEmail')) { return Response::generate(-1, '两次邮箱不一致'); } goto GXwE2; rEgYR: Session::forget('retrieveEmail'); goto b1SIZ; NKMrQ: if (empty($qAkQN)) { return Response::generate(-1, '邮箱为空或格式不正确'); } goto xq4vB; l4kSd: $nIp2z = InputPackage::buildFromInput(); goto aK_fB; PQQa7: Session::forget('retrieveEmailVerify'); goto LCdRi; b1SIZ: Session::put('retrieveMemberUserId', $OYXQL['id']); goto v67ZD; xq4vB: if (empty($RiYZz)) { return Response::generate(-1, '验证码不能为空'); } goto fBZMf; kIcA2: } public function retrieveEmailVerify() { goto pAGrF; HjRMg: $Bvi48 = $nIp2z->getTrimString('captcha'); goto Tl2A4; idPyz: Session::put('retrieveEmail', $qAkQN); goto MM6bb; glD8V: if (empty($qAkQN)) { return Response::generate(-1, '邮箱格式不正确或为空'); } goto HjRMg; uT7yu: $qAkQN = $nIp2z->getEmail('target'); goto glD8V; Dl_u2: Session::put('retrieveEmailVerifyTime', time()); goto idPyz; PEyF2: Session::put('retrieveEmailVerify', $RiYZz); goto Dl_u2; Tl2A4: if (!CaptchaFacade::check($Bvi48)) { return Response::generate(-1, '图片验证码错误'); } goto uuuEZ; MM6bb: return Response::generate(0, '验证码发送成功'); goto CGLTl; yt5ld: $nIp2z = InputPackage::buildFromInput(); goto uT7yu; s84ji: $RiYZz = rand(100000, 999999); goto lw6Qx; lw6Qx: MailSendJob::create($qAkQN, '找回密码验证码', 'verify', array('code' => $RiYZz)); goto PEyF2; pAGrF: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto yt5ld; Jo48v: if (empty($OYXQL)) { return Response::generate(-1, '邮箱没有绑定任何账号'); } goto hgVLX; hgVLX: if (Session::get('retrieveEmailVerifyTime') && $qAkQN == Session::get('retrieveEmail')) { if (Session::get('retrieveEmailVerifyTime') + 60 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto s84ji; uuuEZ: $OYXQL = MemberUtil::getByEmail($qAkQN); goto Jo48v; CGLTl: } public function retrieveResetInfo() { goto GLbOv; tnKTd: if (empty($eZXtQ)) { $eZXtQ = $OYXQL['phone']; } goto EHJ6r; GLbOv: $xBX2O = Session::get('retrieveMemberUserId'); goto YGd2W; YGd2W: if (empty($xBX2O)) { return Response::generate(-1, '请求错误'); } goto PZwPT; QOkWE: $eZXtQ = $OYXQL['username']; goto tnKTd; hmPcX: return Response::generate(0, null, array('memberUser' => array('username' => $eZXtQ))); goto T6D5X; PZwPT: $OYXQL = MemberUtil::get($xBX2O); goto QOkWE; EHJ6r: if (empty($eZXtQ)) { $eZXtQ = $OYXQL['email']; } goto hmPcX; T6D5X: } public function retrieveReset() { goto A2oVx; JE2BG: if (empty($AAh3w)) { return Response::generate(-1, '请输入密码'); } goto E3Z7b; ekJTO: $ULXwZ = MemberUtil::changePassword($OYXQL['id'], $AAh3w, null, true); goto V9YGx; ymYeM: $qK70i = $nIp2z->getTrimString('passwordRepeat'); goto JE2BG; A2oVx: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto m470M; lqh09: if (empty($OYXQL)) { return Response::generate(-1, '用户不存在'); } goto ekJTO; cGHD8: $OYXQL = MemberUtil::get($xBX2O); goto lqh09; FQp5J: return Response::generate(0, '成功设置新密码,请您登录'); goto mQ5pf; E3Z7b: if ($AAh3w != $qK70i) { return Response::generate(-1, '两次输入密码不一致'); } goto cGHD8; JGig_: $xBX2O = Session::get('retrieveMemberUserId'); goto BYGUL; m470M: $nIp2z = InputPackage::buildFromInput(); goto JGig_; T28h8: $AAh3w = $nIp2z->getTrimString('password'); goto ymYeM; V9YGx: if ($ULXwZ['code']) { return Response::generate(-1, $ULXwZ['msg']); } goto qMFqc; qMFqc: EventUtil::fire(new MemberUserPasswordResetedEvent($OYXQL['id'], $AAh3w)); goto mSjOB; mSjOB: Session::forget('retrieveMemberUserId'); goto FQp5J; BYGUL: if (empty($xBX2O)) { return Response::generate(-1, '请求错误'); } goto T28h8; mQ5pf: } public function retrieveCaptchaRaw() { return CaptchaFacade::create('default'); } public function retrieveCaptcha() { $Bvi48 = $this->retrieveCaptchaRaw(); return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($Bvi48->getOriginalContent()))); } }